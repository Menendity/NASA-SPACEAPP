#!/usr/bin/env python3
"""
Sistema de An√°lisis de Sat√©lites
NASA Space App Challenge 2025

Este sistema permite:
1. Obtener datos de sat√©lites desde Celestrak usando Skyfield
2. Buscar sat√©lites por nombre
3. Calcular √≥rbitas y posiciones futuras
4. Predecir posibles colisiones en los pr√≥ximos 6 meses
5. Visualizar trayectorias orbitales

Autor: NASA Space App Team
Fecha: Octubre 2025
"""

import requests
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import json
import os
from skyfield.api import load, EarthSatellite
from skyfield.timelib import Time
import pandas as pd
from typing import List, Dict, Tuple, Optional
import warnings
warnings.filterwarnings('ignore')

# Importaciones para visualizaci√≥n 3D
from mpl_toolkits.mplot3d import Axes3D
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots


class SatelliteAnalyzer:
    """
    Clase principal para an√°lisis de sat√©lites usando Skyfield y datos de Celestrak
    """
    
    def __init__(self):
        """Inicializar el analizador de sat√©lites"""
        self.ts = load.timescale()
        self.satellites = {}
        self.tle_data = {}
        self.earth = load('de421.bsp')['earth']
        print("üõ∞Ô∏è  Inicializando Sistema de An√°lisis de Sat√©lites...")
        
    def download_tle_data(self, tle_url: str = None) -> bool:
        """
        Descargar datos TLE (Two-Line Elements) desde Celestrak
        
        Args:
            tle_url: URL personalizada para datos TLE
            
        Returns:
            bool: True si la descarga fue exitosa
        """
        try:
            # URLs de diferentes categor√≠as de sat√©lites de Celestrak
            urls = {
                'active': 'https://celestrak.org/NORAD/elements/gp.php?GROUP=active&FORMAT=tle',
                'stations': 'https://celestrak.org/NORAD/elements/gp.php?GROUP=stations&FORMAT=tle',
                'weather': 'https://celestrak.org/NORAD/elements/gp.php?GROUP=weather&FORMAT=tle',
                'communications': 'https://celestrak.org/NORAD/elements/gp.php?GROUP=active&FORMAT=tle',
                'navigation': 'https://celestrak.org/NORAD/elements/gp.php?GROUP=gps-ops&FORMAT=tle'
            }
            
            if tle_url:
                urls['custom'] = tle_url
                
            print("üì° Descargando datos TLE desde Celestrak...")
            
            all_satellites = {}
            for category, url in urls.items():
                try:
                    response = requests.get(url, timeout=30)
                    response.raise_for_status()
                    
                    # Parsear datos TLE
                    lines = response.text.strip().split('\n')
                    i = 0
                    while i < len(lines) - 2:
                        if lines[i].strip() and not lines[i].startswith('#'):
                            name = lines[i].strip()
                            line1 = lines[i + 1].strip()
                            line2 = lines[i + 2].strip()
                            
                            if line1.startswith('1 ') and line2.startswith('2 '):
                                # Crear sat√©lite usando Skyfield
                                satellite = EarthSatellite(line1, line2, name, self.ts)
                                all_satellites[name] = {
                                    'satellite': satellite,
                                    'line1': line1,
                                    'line2': line2,
                                    'category': category
                                }
                        i += 3
                        
                    print(f"   ‚úÖ {category}: {len([s for s in all_satellites.values() if s['category'] == category])} sat√©lites")
                    
                except Exception as e:
                    print(f"   ‚ùå Error descargando {category}: {str(e)}")
                    continue
            
            self.satellites = all_satellites
            print(f"üéØ Total de sat√©lites cargados: {len(self.satellites)}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error descargando datos TLE: {str(e)}")
            return False
    
    def export_satellites_list(self, filename: str = "satelites_disponibles.txt") -> bool:
        """
        Exportar lista de todos los sat√©lites disponibles a un archivo de texto
        
        Args:
            filename: Nombre del archivo a crear
            
        Returns:
            bool: True si la exportaci√≥n fue exitosa
        """
        try:
            if not self.satellites:
                print("‚ùå No hay sat√©lites cargados. Ejecuta download_tle_data() primero.")
                return False
            
            # Organizar sat√©lites por categor√≠a
            satellites_by_category = {}
            for name, data in self.satellites.items():
                category = data['category']
                if category not in satellites_by_category:
                    satellites_by_category[category] = []
                satellites_by_category[category].append(name)
            
            # Ordenar sat√©lites alfab√©ticamente dentro de cada categor√≠a
            for category in satellites_by_category:
                satellites_by_category[category].sort()
            
            # Crear el archivo de texto
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("=" * 80 + "\n")
                f.write("LISTA DE SAT√âLITES DISPONIBLES\n")
                f.write("Sistema de An√°lisis de Sat√©lites - NASA Space App Challenge 2025\n")
                f.write("=" * 80 + "\n")
                f.write(f"Fecha de generaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Total de sat√©lites: {len(self.satellites)}\n")
                f.write("=" * 80 + "\n\n")
                
                # Escribir resumen por categor√≠a
                f.write("RESUMEN POR CATEGOR√çA:\n")
                f.write("-" * 40 + "\n")
                total_count = 0
                for category, sat_list in satellites_by_category.items():
                    count = len(sat_list)
                    total_count += count
                    f.write(f"{category.capitalize():20s}: {count:5d} sat√©lites\n")
                f.write("-" * 40 + "\n")
                f.write(f"{'TOTAL':20s}: {total_count:5d} sat√©lites\n\n")
                
                # Escribir lista detallada por categor√≠a
                for category, sat_list in satellites_by_category.items():
                    f.write("=" * 80 + "\n")
                    f.write(f"CATEGOR√çA: {category.upper()}\n")
                    f.write(f"Total en esta categor√≠a: {len(sat_list)} sat√©lites\n")
                    f.write("=" * 80 + "\n")
                    
                    for i, sat_name in enumerate(sat_list, 1):
                        f.write(f"{i:4d}. {sat_name}\n")
                    
                    f.write("\n")
                
                # Agregar lista alfab√©tica completa
                f.write("=" * 80 + "\n")
                f.write("LISTA ALFAB√âTICA COMPLETA\n")
                f.write("=" * 80 + "\n")
                
                all_satellites = sorted(self.satellites.keys())
                for i, sat_name in enumerate(all_satellites, 1):
                    category = self.satellites[sat_name]['category']
                    f.write(f"{i:5d}. {sat_name:<50s} [{category}]\n")
                
                # Agregar informaci√≥n √∫til al final
                f.write("\n" + "=" * 80 + "\n")
                f.write("INSTRUCCIONES DE USO:\n")
                f.write("=" * 80 + "\n")
                f.write("1. Copia el nombre exacto del sat√©lite que deseas analizar\n")
                f.write("2. P√©galo en el programa cuando se solicite el nombre\n")
                f.write("3. Los nombres son sensibles a may√∫sculas y min√∫sculas\n")
                f.write("4. Usa Ctrl+F para buscar sat√©lites espec√≠ficos en este archivo\n\n")
                
                f.write("EJEMPLOS DE SAT√âLITES INTERESANTES:\n")
                f.write("-" * 40 + "\n")
                
                # Buscar algunos sat√©lites interesantes como ejemplos
                interesting_examples = []
                search_terms = ["ISS", "HUBBLE", "NOAA", "GPS", "STARLINK", "GOES"]
                
                for term in search_terms:
                    matches = [name for name in all_satellites if term in name.upper()]
                    if matches:
                        interesting_examples.append(f"‚Ä¢ {matches[0]} (b√∫squeda: '{term}')")
                
                for example in interesting_examples:
                    f.write(f"{example}\n")
                
                f.write("\n" + "=" * 80 + "\n")
                f.write("¬°Explora el cosmos, un sat√©lite a la vez! üõ∞Ô∏èüåå\n")
                f.write("=" * 80 + "\n")
            
            print(f"‚úÖ Lista de sat√©lites exportada exitosamente:")
            print(f"   üìÅ Archivo: {filename}")
            print(f"   üõ∞Ô∏è  Total de sat√©lites: {len(self.satellites)}")
            print(f"   üìÇ Categor√≠as: {len(satellites_by_category)}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error exportando lista de sat√©lites: {str(e)}")
            return False
    
    def search_satellite(self, search_term: str) -> List[str]:
        """
        Buscar sat√©lites por nombre
        
        Args:
            search_term: T√©rmino de b√∫squeda
            
        Returns:
            List[str]: Lista de nombres de sat√©lites que coinciden
        """
        search_term = search_term.lower()
        matches = []
        
        for name in self.satellites.keys():
            if search_term in name.lower():
                matches.append(name)
                
        return sorted(matches)
    
    def get_popular_satellites(self) -> Dict[str, List[str]]:
        """
        Obtener una lista de sat√©lites populares organizados por categor√≠a
        
        Returns:
            Dict: Diccionario con categor√≠as y sat√©lites populares
        """
        popular_categories = {
            'Estaciones Espaciales': ['ISS', 'ZARYA', 'TIANGONG'],
            'Telescopios Espaciales': ['HUBBLE', 'SPITZER', 'CHANDRA'],
            'Sat√©lites Meteorol√≥gicos': ['NOAA', 'GOES', 'METEOSAT'],
            'Navegaci√≥n GPS': ['GPS', 'NAVSTAR', 'GLONASS'],
            'Comunicaciones': ['STARLINK', 'INTELSAT', 'IRIDIUM'],
            'Observaci√≥n Terrestre': ['LANDSAT', 'AQUA', 'TERRA', 'SENTINEL']
        }
        
        found_satellites = {}
        
        for category, search_terms in popular_categories.items():
            found_satellites[category] = []
            for term in search_terms:
                matches = self.search_satellite(term)
                if matches:
                    # Agregar los primeros 3 matches de cada t√©rmino
                    found_satellites[category].extend(matches[:3])
            
            # Remover duplicados y limitar a 5 por categor√≠a
            found_satellites[category] = list(dict.fromkeys(found_satellites[category]))[:5]
        
        return found_satellites
    
    def suggest_satellites(self, partial_name: str) -> List[str]:
        """
        Sugerir sat√©lites bas√°ndose en un nombre parcial
        
        Args:
            partial_name: Nombre parcial del sat√©lite
            
        Returns:
            List[str]: Lista de sugerencias
        """
        if len(partial_name) < 2:
            return []
        
        partial_name = partial_name.lower()
        suggestions = []
        
        # Buscar coincidencias exactas al inicio del nombre
        for name in self.satellites.keys():
            if name.lower().startswith(partial_name):
                suggestions.append(name)
        
        # Si no hay suficientes, buscar coincidencias en cualquier parte
        if len(suggestions) < 10:
            for name in self.satellites.keys():
                if partial_name in name.lower() and name not in suggestions:
                    suggestions.append(name)
        
        return sorted(suggestions)[:15]  # Limitar a 15 sugerencias
    
    def browse_satellites_by_category(self) -> Dict[str, List[str]]:
        """
        Navegar sat√©lites organizados por categor√≠a
        
        Returns:
            Dict: Sat√©lites organizados por categor√≠a con muestras
        """
        satellites_by_category = {}
        
        for name, data in self.satellites.items():
            category = data['category']
            if category not in satellites_by_category:
                satellites_by_category[category] = []
            satellites_by_category[category].append(name)
        
        # Ordenar y limitar para navegaci√≥n f√°cil
        for category in satellites_by_category:
            satellites_by_category[category] = sorted(satellites_by_category[category])
        
        return satellites_by_category
    
    def show_satellite_examples(self) -> None:
        """
        Mostrar ejemplos de sat√©lites interesantes con descripci√≥n
        """
        examples = {
            "üè† Estaciones Espaciales": {
                "search_terms": ["ISS", "ZARYA", "TIANGONG"],
                "description": "Laboratorios orbitales tripulados"
            },
            "üî≠ Telescopios Espaciales": {
                "search_terms": ["HUBBLE", "SPITZER", "KEPLER"],
                "description": "Observatorios astron√≥micos en el espacio"
            },
            "üå§Ô∏è Sat√©lites Meteorol√≥gicos": {
                "search_terms": ["NOAA", "GOES", "METEOSAT"],
                "description": "Monitoreo del clima y tiempo"
            },
            "üó∫Ô∏è Navegaci√≥n GPS": {
                "search_terms": ["GPS", "NAVSTAR", "GALILEO"],
                "description": "Sistemas de posicionamiento global"
            },
            "üì° Comunicaciones": {
                "search_terms": ["STARLINK", "IRIDIUM", "INTELSAT"],
                "description": "Internet y telecomunicaciones"
            },
            "üåç Observaci√≥n Terrestre": {
                "search_terms": ["LANDSAT", "AQUA", "TERRA"],
                "description": "Monitoreo ambiental y recursos"
            }
        }
        
        print("\nüåü EJEMPLOS DE SAT√âLITES INTERESANTES:")
        print("=" * 60)
        
        for category, info in examples.items():
            print(f"\n{category}")
            print(f"üìù {info['description']}")
            found_examples = []
            
            for term in info['search_terms']:
                matches = self.search_satellite(term)
                if matches:
                    found_examples.extend(matches[:2])  # M√°ximo 2 por t√©rmino
            
            # Mostrar ejemplos √∫nicos
            unique_examples = list(dict.fromkeys(found_examples))[:3]
            for i, example in enumerate(unique_examples, 1):
                print(f"   {i}. {example}")
            
            if not unique_examples:
                print("   (No se encontraron ejemplos en los datos actuales)")
        
        print(f"\nüí° TIP: Usa la opci√≥n 1 para buscar cualquiera de estos nombres")
        print(f"üîç Ejemplo: busca 'ISS' para encontrar la Estaci√≥n Espacial Internacional")
    
    def smart_search(self, search_term: str) -> Dict:
        """
        B√∫squeda inteligente que proporciona resultados y sugerencias
        
        Args:
            search_term: T√©rmino de b√∫squeda
            
        Returns:
            Dict: Resultados detallados con sugerencias
        """
        results = {
            'exact_matches': [],
            'partial_matches': [],
            'suggestions': [],
            'category_matches': {},
            'total_found': 0
        }
        
        if not search_term or len(search_term) < 2:
            return results
        
        search_lower = search_term.lower()
        
        # Buscar coincidencias exactas
        for name in self.satellites.keys():
            name_lower = name.lower()
            if search_lower == name_lower:
                results['exact_matches'].append(name)
            elif search_lower in name_lower:
                results['partial_matches'].append(name)
        
        # Organizar por categor√≠a
        for name in results['partial_matches']:
            category = self.satellites[name]['category']
            if category not in results['category_matches']:
                results['category_matches'][category] = []
            results['category_matches'][category].append(name)
        
        # Generar sugerencias si hay pocos resultados
        if len(results['partial_matches']) < 10:
            results['suggestions'] = self.suggest_satellites(search_term)
        
        results['total_found'] = len(results['exact_matches']) + len(results['partial_matches'])
        
        return results
    
    def get_satellite_info(self, satellite_name: str) -> Optional[Dict]:
        """
        Obtener informaci√≥n detallada de un sat√©lite
        
        Args:
            satellite_name: Nombre del sat√©lite
            
        Returns:
            Dict: Informaci√≥n del sat√©lite o None si no se encuentra
        """
        if satellite_name not in self.satellites:
            return None
            
        sat_data = self.satellites[satellite_name]
        satellite = sat_data['satellite']
        
        # Tiempo actual
        now = self.ts.now()
        
        # Calcular posici√≥n actual
        geocentric = satellite.at(now)
        subpoint = geocentric.subpoint()
        
        # Extraer elementos orbitales del TLE
        line1 = sat_data['line1']
        line2 = sat_data['line2']
        
        # Parsear elementos orbitales
        inclination = float(line2[8:16])
        raan = float(line2[17:25])  # Right Ascension of Ascending Node
        eccentricity = float('0.' + line2[26:33])
        arg_perigee = float(line2[34:42])
        mean_anomaly = float(line2[43:51])
        mean_motion = float(line2[52:63])
        
        # Calcular per√≠odo orbital
        period_minutes = 1440 / mean_motion  # minutos
        period_hours = period_minutes / 60
        
        # Calcular altitud aproximada
        # Usando la tercera ley de Kepler: n = sqrt(GM/a¬≥)
        GM = 398600.4418  # km¬≥/s¬≤
        n_rad_per_sec = mean_motion * 2 * np.pi / 86400  # radianes por segundo
        semi_major_axis = (GM / (n_rad_per_sec ** 2)) ** (1/3)
        
        altitude_km = semi_major_axis - 6371  # Radio terrestre aprox
        
        info = {
            'name': satellite_name,
            'category': sat_data['category'],
            'current_position': {
                'latitude': subpoint.latitude.degrees,
                'longitude': subpoint.longitude.degrees,
                'altitude_km': subpoint.elevation.km
            },
            'orbital_elements': {
                'inclination_deg': inclination,
                'raan_deg': raan,
                'eccentricity': eccentricity,
                'argument_of_perigee_deg': arg_perigee,
                'mean_anomaly_deg': mean_anomaly,
                'mean_motion_rev_per_day': mean_motion,
                'period_hours': period_hours,
                'semi_major_axis_km': semi_major_axis,
                'approx_altitude_km': altitude_km
            },
            'tle_data': {
                'line1': line1,
                'line2': line2
            }
        }
        
        return info
    
    def calculate_future_positions(self, satellite_name: str, days_ahead: int = 180) -> List[Dict]:
        """
        Calcular posiciones futuras del sat√©lite
        
        Args:
            satellite_name: Nombre del sat√©lite
            days_ahead: D√≠as hacia el futuro para calcular
            
        Returns:
            List[Dict]: Posiciones futuras del sat√©lite
        """
        if satellite_name not in self.satellites:
            return []
            
        satellite = self.satellites[satellite_name]['satellite']
        
        # Crear timestamps para los pr√≥ximos d√≠as
        start_time = self.ts.now()
        positions = []
        
        # Calcular posiciones cada 12 horas
        for hours in range(0, days_ahead * 24, 12):
            t = self.ts.tt_jd(start_time.tt + hours / 24)
            geocentric = satellite.at(t)
            subpoint = geocentric.subpoint()
            
            positions.append({
                'datetime': t.utc_datetime(),
                'latitude': subpoint.latitude.degrees,
                'longitude': subpoint.longitude.degrees,
                'altitude_km': subpoint.elevation.km,
                'x_km': geocentric.position.km[0],
                'y_km': geocentric.position.km[1],
                'z_km': geocentric.position.km[2]
            })
            
        return positions
    
    def analyze_collision_risk(self, satellite1_name: str, satellite2_name: str = None, 
                             threshold_km: float = 10.0, days_ahead: int = 180) -> Dict:
        """
        Analizar riesgo de colisi√≥n entre sat√©lites
        
        Args:
            satellite1_name: Primer sat√©lite
            satellite2_name: Segundo sat√©lite (si None, analiza contra todos)
            threshold_km: Distancia m√≠nima para considerar riesgo
            days_ahead: D√≠as a analizar hacia el futuro
            
        Returns:
            Dict: An√°lisis de riesgo de colisi√≥n
        """
        if satellite1_name not in self.satellites:
            return {'error': f'Sat√©lite {satellite1_name} no encontrado'}
            
        sat1 = self.satellites[satellite1_name]['satellite']
        close_encounters = []
        
        # Determinar sat√©lites a analizar
        satellites_to_check = {}
        if satellite2_name:
            if satellite2_name in self.satellites:
                satellites_to_check[satellite2_name] = self.satellites[satellite2_name]
        else:
            # Analizar contra una muestra de sat√©lites (primeros 100 para eficiencia)
            sat_names = list(self.satellites.keys())[:100]
            for name in sat_names:
                if name != satellite1_name:
                    satellites_to_check[name] = self.satellites[name]
        
        print(f"üîç Analizando {len(satellites_to_check)} sat√©lites para posibles colisiones...")
        
        # Analizar cada 6 horas durante el per√≠odo especificado
        for hours in range(0, days_ahead * 24, 6):
            t = self.ts.tt_jd(self.ts.now().tt + hours / 24)
            pos1 = sat1.at(t)
            
            for sat2_name, sat2_data in satellites_to_check.items():
                sat2 = sat2_data['satellite']
                pos2 = sat2.at(t)
                
                # Calcular distancia entre sat√©lites
                distance_km = np.linalg.norm(
                    np.array(pos1.position.km) - np.array(pos2.position.km)
                )
                
                if distance_km < threshold_km:
                    close_encounters.append({
                        'datetime': t.utc_datetime(),
                        'satellite2': sat2_name,
                        'distance_km': distance_km,
                        'satellite1_pos': pos1.position.km,
                        'satellite2_pos': pos2.position.km
                    })
        
        # Calcular estad√≠sticas de riesgo
        risk_level = 'BAJO'
        if close_encounters:
            min_distance = min(enc['distance_km'] for enc in close_encounters)
            if min_distance < 1.0:
                risk_level = 'CR√çTICO'
            elif min_distance < 5.0:
                risk_level = 'ALTO'
            else:
                risk_level = 'MEDIO'
        
        return {
            'satellite': satellite1_name,
            'analysis_period_days': days_ahead,
            'threshold_km': threshold_km,
            'close_encounters': close_encounters,
            'risk_level': risk_level,
            'total_encounters': len(close_encounters),
            'satellites_analyzed': len(satellites_to_check)
        }
    
    def plot_orbit(self, satellite_name: str, hours: int = 24) -> bool:
        """
        Visualizar la √≥rbita de un sat√©lite
        
        Args:
            satellite_name: Nombre del sat√©lite
            hours: Horas de √≥rbita a mostrar
            
        Returns:
            bool: True si el plot fue exitoso
        """
        if satellite_name not in self.satellites:
            print(f"‚ùå Sat√©lite {satellite_name} no encontrado")
            return False
            
        satellite = self.satellites[satellite_name]['satellite']
        
        # Calcular posiciones para la visualizaci√≥n
        positions = []
        times = []
        
        start_time = self.ts.now()
        for minutes in range(0, hours * 60, 10):  # Cada 10 minutos
            t = self.ts.tt_jd(start_time.tt + minutes / (24 * 60))
            geocentric = satellite.at(t)
            subpoint = geocentric.subpoint()
            
            positions.append([
                subpoint.longitude.degrees,
                subpoint.latitude.degrees
            ])
            times.append(t.utc_datetime())
        
        positions = np.array(positions)
        
        # Crear el plot
        plt.figure(figsize=(15, 8))
        
        # Subplot 1: Trayectoria en mapa mundial
        plt.subplot(1, 2, 1)
        plt.plot(positions[:, 0], positions[:, 1], 'b-', linewidth=2, alpha=0.7)
        plt.scatter(positions[0, 0], positions[0, 1], color='green', s=100, 
                   label='Inicio', zorder=5)
        plt.scatter(positions[-1, 0], positions[-1, 1], color='red', s=100, 
                   label='Fin', zorder=5)
        
        plt.xlim(-180, 180)
        plt.ylim(-90, 90)
        plt.xlabel('Longitud (¬∞)')
        plt.ylabel('Latitud (¬∞)')
        plt.title(f'Trayectoria Orbital: {satellite_name}\n({hours} horas)')
        plt.grid(True, alpha=0.3)
        plt.legend()
        
        # Agregar l√≠neas de referencia
        plt.axhline(y=0, color='k', linestyle='--', alpha=0.3)
        plt.axvline(x=0, color='k', linestyle='--', alpha=0.3)
        
        # Subplot 2: Altitud vs tiempo
        plt.subplot(1, 2, 2)
        altitudes = []
        for minutes in range(0, hours * 60, 10):
            t = self.ts.tt_jd(start_time.tt + minutes / (24 * 60))
            geocentric = satellite.at(t)
            subpoint = geocentric.subpoint()
            altitudes.append(subpoint.elevation.km)
        
        time_hours = [i/6 for i in range(len(altitudes))]  # Cada 10 min = 1/6 hora
        plt.plot(time_hours, altitudes, 'r-', linewidth=2)
        plt.xlabel('Tiempo (horas)')
        plt.ylabel('Altitud (km)')
        plt.title('Variaci√≥n de Altitud')
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # Guardar el plot
        filename = f"orbit_{satellite_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"üìä Gr√°fico guardado como: {filename}")
        
        plt.show()
        return True
    
    def plot_3d_earth_with_satellites(self, satellite_names: List[str], hours: int = 24) -> bool:
        """
        Visualizaci√≥n 3D de la Tierra con trayectorias de sat√©lites
        
        Args:
            satellite_names: Lista de nombres de sat√©lites a visualizar
            hours: Horas de √≥rbita a mostrar
            
        Returns:
            bool: True si la visualizaci√≥n fue exitosa
        """
        if not satellite_names:
            print("‚ùå No se proporcionaron nombres de sat√©lites")
            return False
        
        # Verificar que los sat√©lites existen
        valid_satellites = []
        for name in satellite_names:
            if name in self.satellites:
                valid_satellites.append(name)
            else:
                print(f"‚ö†Ô∏è  Sat√©lite {name} no encontrado")
        
        if not valid_satellites:
            print("‚ùå No se encontraron sat√©lites v√°lidos")
            return False
        
        print(f"üåç Generando visualizaci√≥n 3D para {len(valid_satellites)} sat√©lite(s)...")
        
        # Crear figura de Plotly
        fig = go.Figure()
        
        # Agregar la Tierra como una esfera
        u = np.linspace(0, 2 * np.pi, 50)
        v = np.linspace(0, np.pi, 50)
        x_earth = 6371 * np.outer(np.cos(u), np.sin(v))  # Radio de la Tierra: 6371 km
        y_earth = 6371 * np.outer(np.sin(u), np.sin(v))
        z_earth = 6371 * np.outer(np.ones(np.size(u)), np.cos(v))
        
        fig.add_trace(go.Surface(
            x=x_earth, y=y_earth, z=z_earth,
            colorscale='Blues',
            opacity=0.7,
            name='Tierra',
            showscale=False,
            hovertemplate='Tierra<extra></extra>'
        ))
        
        # Colores para diferentes sat√©lites
        colors = ['red', 'blue', 'green', 'orange', 'purple', 'yellow', 'pink', 'cyan']
        
        # Agregar trayectorias de sat√©lites
        for i, satellite_name in enumerate(valid_satellites):
            satellite = self.satellites[satellite_name]['satellite']
            color = colors[i % len(colors)]
            
            # Calcular posiciones del sat√©lite
            positions_3d = []
            times = []
            
            start_time = self.ts.now()
            for minutes in range(0, hours * 60, 15):  # Cada 15 minutos para mejor rendimiento
                t = self.ts.tt_jd(start_time.tt + minutes / (24 * 60))
                geocentric = satellite.at(t)
                
                # Convertir a coordenadas cartesianas (km)
                position = geocentric.position.km
                positions_3d.append(position)
                times.append(t.utc_datetime())
            
            positions_3d = np.array(positions_3d)
            
            # Agregar trayectoria del sat√©lite
            fig.add_trace(go.Scatter3d(
                x=positions_3d[:, 0],
                y=positions_3d[:, 1], 
                z=positions_3d[:, 2],
                mode='lines+markers',
                line=dict(color=color, width=4),
                marker=dict(size=3, color=color),
                name=f'{satellite_name}',
                hovertemplate=f'<b>{satellite_name}</b><br>' +
                            'X: %{x:.1f} km<br>' +
                            'Y: %{y:.1f} km<br>' +
                            'Z: %{z:.1f} km<extra></extra>'
            ))
            
            # Marcar posici√≥n inicial y final
            fig.add_trace(go.Scatter3d(
                x=[positions_3d[0, 0]],
                y=[positions_3d[0, 1]],
                z=[positions_3d[0, 2]],
                mode='markers',
                marker=dict(size=8, color='lightgreen', symbol='diamond'),
                name=f'{satellite_name} - Inicio',
                showlegend=False,
                hovertemplate=f'<b>{satellite_name} - Inicio</b><br>' +
                            'X: %{x:.1f} km<br>' +
                            'Y: %{y:.1f} km<br>' +
                            'Z: %{z:.1f} km<extra></extra>'
            ))
            
            fig.add_trace(go.Scatter3d(
                x=[positions_3d[-1, 0]],
                y=[positions_3d[-1, 1]],
                z=[positions_3d[-1, 2]],
                mode='markers',
                marker=dict(size=8, color='darkred', symbol='cross'),
                name=f'{satellite_name} - Final',
                showlegend=False,
                hovertemplate=f'<b>{satellite_name} - Final</b><br>' +
                            'X: %{x:.1f} km<br>' +
                            'Y: %{y:.1f} km<br>' +
                            'Z: %{z:.1f} km<extra></extra>'
            ))
        
        # Configurar el layout
        fig.update_layout(
            title=f'üõ∞Ô∏è Visualizaci√≥n 3D: Sat√©lites alrededor de la Tierra<br>' +
                  f'<sub>Trayectorias de {hours} horas - {len(valid_satellites)} sat√©lite(s)</sub>',
            scene=dict(
                xaxis_title='X (km)',
                yaxis_title='Y (km)',
                zaxis_title='Z (km)',
                aspectmode='cube',
                camera=dict(
                    eye=dict(x=2, y=2, z=2)
                ),
                bgcolor='black'
            ),
            font=dict(size=12),
            width=1000,
            height=800,
            margin=dict(l=0, r=0, t=50, b=0)
        )
        
        # Mostrar la visualizaci√≥n
        fig.show()
        
        # Guardar como HTML interactivo
        filename = f"satellite_3d_visualization_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        fig.write_html(filename)
        print(f"üåç Visualizaci√≥n 3D guardada como: {filename}")
        
        return True
    
    def plot_orbital_animation(self, satellite_name: str, hours: int = 24, frames: int = 100) -> bool:
        """
        Crear una animaci√≥n de la √≥rbita del sat√©lite alrededor de la Tierra
        
        Args:
            satellite_name: Nombre del sat√©lite
            hours: Horas de √≥rbita a animar
            frames: N√∫mero de frames en la animaci√≥n
            
        Returns:
            bool: True si la animaci√≥n fue exitosa
        """
        try:
            if satellite_name not in self.satellites:
                print(f"‚ùå Sat√©lite {satellite_name} no encontrado")
                return False
            
            satellite = self.satellites[satellite_name]['satellite']
            print(f"üé¨ Generando animaci√≥n orbital para {satellite_name}...")
            print(f"‚è±Ô∏è  Calculando {frames} posiciones para {hours} horas...")
            
            # Calcular todas las posiciones
            all_positions = []
            start_time = self.ts.now()
            
            for frame in range(frames + 1):
                minutes = (hours * 60 * frame) / frames
                t = self.ts.tt_jd(start_time.tt + minutes / (24 * 60))
                geocentric = satellite.at(t)
                position = geocentric.position.km
                all_positions.append(position)
            
            all_positions = np.array(all_positions)
            print(f"‚úÖ Posiciones calculadas")
            
            # Crear la animaci√≥n
            fig = go.Figure()
            
            # Agregar la Tierra con un colorscale m√°s simple
            u = np.linspace(0, 2 * np.pi, 30)
            v = np.linspace(0, np.pi, 30)
            x_earth = 6371 * np.outer(np.cos(u), np.sin(v))
            y_earth = 6371 * np.outer(np.sin(u), np.sin(v))
            z_earth = 6371 * np.outer(np.ones(np.size(u)), np.cos(v))
            
            fig.add_trace(go.Surface(
                x=x_earth, y=y_earth, z=z_earth,
                colorscale='Blues',  # Cambi√© de 'Earth' a 'Blues' para mayor compatibilidad
                opacity=0.8,
                name='Tierra',
                showscale=False,
                hovertemplate='Tierra<extra></extra>'
            ))
            
            print(f"üåç Tierra agregada a la visualizaci√≥n")
            
            # Crear frames para la animaci√≥n (reducir cantidad para mejor rendimiento)
            frames_list = []
            step = max(1, frames // 20)  # M√°ximo 20 frames para mejor rendimiento
            
            for i in range(0, frames + 1, step):
                if i >= len(all_positions):
                    break
                    
                frame_data = [
                    go.Surface(
                        x=x_earth, y=y_earth, z=z_earth,
                        colorscale='Blues',
                        opacity=0.8,
                        showscale=False,
                        hovertemplate='Tierra<extra></extra>'
                    ),
                    go.Scatter3d(
                        x=all_positions[:i+1, 0],
                        y=all_positions[:i+1, 1],
                        z=all_positions[:i+1, 2],
                        mode='lines',
                        line=dict(color='red', width=6),
                        name='Trayectoria',
                        hovertemplate='Trayectoria<extra></extra>'
                    ),
                    go.Scatter3d(
                        x=[all_positions[i, 0]],
                        y=[all_positions[i, 1]],
                        z=[all_positions[i, 2]],
                        mode='markers',
                        marker=dict(size=12, color='yellow', symbol='circle'),
                        name='Sat√©lite',
                        hovertemplate=f'{satellite_name}<br>X: %{{x:.1f}} km<br>Y: %{{y:.1f}} km<br>Z: %{{z:.1f}} km<extra></extra>'
                    )
                ]
                frames_list.append(go.Frame(data=frame_data, name=str(i)))
            
            fig.frames = frames_list
            print(f"üéûÔ∏è  {len(frames_list)} frames de animaci√≥n creados")
            
            # Configurar la animaci√≥n con controles mejorados
            fig.update_layout(
                title=f'üé¨ Animaci√≥n Orbital: {satellite_name}<br><sub>Per√≠odo: {hours} horas | Frames: {len(frames_list)}</sub>',
                scene=dict(
                    xaxis_title='X (km)',
                    yaxis_title='Y (km)', 
                    zaxis_title='Z (km)',
                    aspectmode='cube',
                    camera=dict(eye=dict(x=2.5, y=2.5, z=2.5)),
                    bgcolor='black'
                ),
                font=dict(size=12),
                width=1000,
                height=700,
                updatemenus=[{
                    'type': 'buttons',
                    'showactive': False,
                    'x': 0.1,
                    'y': 0.02,
                    'buttons': [
                        {
                            'label': '‚ñ∂Ô∏è Reproducir',
                            'method': 'animate',
                            'args': [None, {
                                'frame': {'duration': 200, 'redraw': True},
                                'fromcurrent': True,
                                'transition': {'duration': 100}
                            }]
                        },
                        {
                            'label': '‚è∏Ô∏è Pausar',
                            'method': 'animate',
                            'args': [[None], {
                                'frame': {'duration': 0, 'redraw': False},
                                'mode': 'immediate',
                                'transition': {'duration': 0}
                            }]
                        },
                        {
                            'label': 'üîÑ Reiniciar',
                            'method': 'animate',
                            'args': [None, {
                                'frame': {'duration': 200, 'redraw': True},
                                'mode': 'immediate',
                                'transition': {'duration': 0}
                            }]
                        }
                    ]
                }],
                sliders=[{
                    'active': 0,
                    'yanchor': 'top',
                    'xanchor': 'left',
                    'currentvalue': {
                        'font': {'size': 20},
                        'prefix': 'Frame:',
                        'visible': True,
                        'xanchor': 'right'
                    },
                    'transition': {'duration': 100, 'easing': 'cubic-in-out'},
                    'pad': {'b': 10, 't': 50},
                    'len': 0.9,
                    'x': 0.1,
                    'y': 0,
                    'steps': [
                        {
                            'args': [[f.name], {
                                'frame': {'duration': 100, 'redraw': True},
                                'mode': 'immediate',
                                'transition': {'duration': 100}
                            }],
                            'label': f.name,
                            'method': 'animate'
                        } for f in frames_list
                    ]
                }]
            )
            
            print(f"üé® Configuraci√≥n de animaci√≥n completada")
            
            # Mostrar la visualizaci√≥n
            print(f"üåê Abriendo animaci√≥n en el navegador...")
            fig.show()
            
            # Guardar como HTML
            safe_name = satellite_name.replace(' ', '_').replace('(', '').replace(')', '')
            filename = f"animacion_orbital_{safe_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            fig.write_html(filename)
            print(f"üíæ Animaci√≥n guardada como: {filename}")
            print(f"üìÅ Ubicaci√≥n: {os.path.abspath(filename)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error creando animaci√≥n: {str(e)}")
            print(f"üí° Sugerencias:")
            print(f"   1. Verifica que el nombre del sat√©lite sea correcto")
            print(f"   2. Intenta con menos frames (ej: 20-30)")
            print(f"   3. Reduce las horas (ej: 2-6 horas)")
            return False


def mostrar_menu():
    """Mostrar el men√∫ de opciones"""
    print("\n" + "=" * 60)
    print("üéØ OPCIONES DISPONIBLES:")
    print("   1. Buscar sat√©lite (b√∫squeda inteligente)")
    print("   2. Ver sat√©lites populares por categor√≠a")
    print("   3. Informaci√≥n detallada de un sat√©lite")
    print("   4. Calcular √≥rbitas futuras")
    print("   5. An√°lizar riesgo de colisi√≥n")
    print("   6. Visualizar √≥rbita (2D)")
    print("   7. Visualizaci√≥n 3D (Tierra + Sat√©lites)")
    print("   8. Animaci√≥n orbital 3D")
    print("   9. Exportar lista completa de sat√©lites")
    print("  10. Salir")
    print("=" * 60)


def main():
    """Funci√≥n principal del programa"""
    print("=" * 60)
    print("üõ∞Ô∏è  SISTEMA DE AN√ÅLISIS DE SAT√âLITES")
    print("    NASA Space App Challenge 2025")
    print("=" * 60)
    
    # Inicializar el analizador
    analyzer = SatelliteAnalyzer()
    
    # Descargar datos de sat√©lites
    if not analyzer.download_tle_data():
        print("‚ùå Error al descargar datos. Terminando programa.")
        return
    
    print("\nÔøΩ ¬°Sistema cargado exitosamente!")
    
    # El men√∫ se mostrar√° autom√°ticamente en cada iteraci√≥n del bucle
    
    while True:
        try:
            # Mostrar men√∫ en cada iteraci√≥n
            mostrar_menu()
            print("\n" + "-" * 40)
            option = input("Selecciona una opci√≥n (1-10): ").strip()
            
            if option == '1':
                # B√∫squeda inteligente de sat√©lite
                search_term = input("üîç Ingresa el nombre del sat√©lite a buscar: ").strip()
                if search_term:
                    results = analyzer.smart_search(search_term)
                    
                    if results['total_found'] > 0:
                        print(f"\n‚úÖ Encontrados {results['total_found']} sat√©lites:")
                        
                        # Mostrar coincidencias exactas primero
                        if results['exact_matches']:
                            print("\nüéØ COINCIDENCIAS EXACTAS:")
                            for i, name in enumerate(results['exact_matches'], 1):
                                print(f"   {i}. {name}")
                        
                        # Mostrar coincidencias parciales por categor√≠a
                        if results['category_matches']:
                            print("\nüìä RESULTADOS POR CATEGOR√çA:")
                            for category, satellites in results['category_matches'].items():
                                print(f"\n   üìÇ {category.capitalize()}:")
                                for i, name in enumerate(satellites[:5], 1):  # M√°ximo 5 por categor√≠a
                                    print(f"      {i}. {name}")
                                if len(satellites) > 5:
                                    print(f"      ... y {len(satellites) - 5} m√°s en esta categor√≠a")
                        
                        # Mostrar sugerencias si hay pocas coincidencias
                        if results['suggestions'] and results['total_found'] < 5:
                            print(f"\nüí° SUGERENCIAS RELACIONADAS:")
                            for i, suggestion in enumerate(results['suggestions'][:8], 1):
                                print(f"   {i}. {suggestion}")
                    else:
                        print("‚ùå No se encontraron sat√©lites con ese nombre")
                        
                        # Mostrar ejemplos populares
                        print("\nüåü ¬øQuiz√°s buscabas alguno de estos sat√©lites populares?")
                        analyzer.show_satellite_examples()
                        
            elif option == '2':
                # Ver sat√©lites populares por categor√≠a
                print("üåü SAT√âLITES POPULARES POR CATEGOR√çA")
                print("=" * 50)
                
                popular = analyzer.get_popular_satellites()
                
                for category, satellites in popular.items():
                    if satellites:
                        print(f"\nüìÇ {category}:")
                        for i, sat in enumerate(satellites, 1):
                            print(f"   {i}. {sat}")
                    else:
                        print(f"\nüìÇ {category}: (No se encontraron en los datos actuales)")
                
                print(f"\nüí° TIP: Copia cualquier nombre exacto para usarlo en otras opciones")
                
            elif option == '3':
                # Informaci√≥n detallada
                sat_name = input("üì° Ingresa el nombre exacto del sat√©lite: ").strip()
                if not sat_name:
                    print("‚ùå Nombre vac√≠o")
                elif sat_name not in analyzer.satellites:
                    print(f"‚ùå Sat√©lite '{sat_name}' no encontrado")
                    # Ofrecer sugerencias
                    suggestions = analyzer.suggest_satellites(sat_name)
                    if suggestions:
                        print(f"\nüîç ¬øQuisiste decir alguno de estos?")
                        for i, suggestion in enumerate(suggestions[:5], 1):
                            print(f"   {i}. {suggestion}")
                else:
                    info = analyzer.get_satellite_info(sat_name)
                    if info:
                        print(f"\nüìä INFORMACI√ìN DE {info['name']}")
                        print("-" * 50)
                        print(f"Categor√≠a: {info['category']}")
                        print(f"Posici√≥n actual:")
                        print(f"  ‚Ä¢ Latitud: {info['current_position']['latitude']:.4f}¬∞")
                        print(f"  ‚Ä¢ Longitud: {info['current_position']['longitude']:.4f}¬∞")
                        print(f"  ‚Ä¢ Altitud: {info['current_position']['altitude_km']:.2f} km")
                        
                        print(f"\nElementos orbitales:")
                        oe = info['orbital_elements']
                        print(f"  ‚Ä¢ Inclinaci√≥n: {oe['inclination_deg']:.2f}¬∞")
                        print(f"  ‚Ä¢ Excentricidad: {oe['eccentricity']:.6f}")
                        print(f"  ‚Ä¢ Per√≠odo orbital: {oe['period_hours']:.2f} horas")
                        print(f"  ‚Ä¢ Altitud aprox: {oe['approx_altitude_km']:.0f} km")
                        print(f"  ‚Ä¢ Revoluciones/d√≠a: {oe['mean_motion_rev_per_day']:.6f}")
                    else:
                        print("‚ùå Sat√©lite no encontrado")
                        
            elif option == '4':
                # Calcular √≥rbitas futuras
                sat_name = input("üöÄ Nombre del sat√©lite: ").strip()
                if sat_name:
                    try:
                        days = int(input("üìÖ D√≠as hacia el futuro (m√°x 180): ") or "30")
                        days = min(days, 180)
                        
                        print(f"‚è≥ Calculando posiciones futuras para {days} d√≠as...")
                        positions = analyzer.calculate_future_positions(sat_name, days)
                        
                        if positions:
                            print(f"\n‚úÖ Calculadas {len(positions)} posiciones")
                            print("Primeras 5 posiciones:")
                            for i, pos in enumerate(positions[:5]):
                                print(f"  {i+1}. {pos['datetime'].strftime('%Y-%m-%d %H:%M')} UTC")
                                print(f"     Lat: {pos['latitude']:.3f}¬∞, Lon: {pos['longitude']:.3f}¬∞")
                                print(f"     Alt: {pos['altitude_km']:.1f} km")
                        else:
                            print("‚ùå No se pudieron calcular las posiciones")
                    except ValueError:
                        print("‚ùå N√∫mero de d√≠as inv√°lido")
                        
            elif option == '5':
                # An√°lisis de riesgo de colisi√≥n
                sat_name = input("‚ö†Ô∏è  Nombre del sat√©lite: ").strip()
                if sat_name:
                    try:
                        days = int(input("üìÖ D√≠as a analizar (m√°x 180): ") or "180")
                        days = min(days, 180)
                        threshold = float(input("üéØ Distancia umbral en km (default 10): ") or "10")
                        
                        print(f"‚è≥ Analizando riesgo de colisi√≥n...")
                        risk_analysis = analyzer.analyze_collision_risk(sat_name, None, threshold, days)
                        
                        if 'error' not in risk_analysis:
                            print(f"\nüéØ AN√ÅLISIS DE RIESGO DE COLISI√ìN")
                            print("-" * 50)
                            print(f"Sat√©lite: {risk_analysis['satellite']}")
                            print(f"Per√≠odo analizado: {risk_analysis['analysis_period_days']} d√≠as")
                            print(f"Sat√©lites analizados: {risk_analysis['satellites_analyzed']}")
                            print(f"Umbral de distancia: {risk_analysis['threshold_km']} km")
                            print(f"NIVEL DE RIESGO: {risk_analysis['risk_level']}")
                            print(f"Encuentros cercanos: {risk_analysis['total_encounters']}")
                            
                            if risk_analysis['close_encounters']:
                                print("\n‚ö†Ô∏è  ENCUENTROS CERCANOS DETECTADOS:")
                                for enc in risk_analysis['close_encounters'][:10]:  # Primeros 10
                                    print(f"  ‚Ä¢ {enc['datetime'].strftime('%Y-%m-%d %H:%M')} UTC")
                                    print(f"    Con: {enc['satellite2']}")
                                    print(f"    Distancia: {enc['distance_km']:.2f} km")
                            else:
                                print("‚úÖ No se detectaron encuentros cercanos")
                        else:
                            print(f"‚ùå {risk_analysis['error']}")
                    except ValueError:
                        print("‚ùå Valores inv√°lidos")
                        
            elif option == '6':
                # Visualizar √≥rbita 2D
                sat_name = input("üìà Nombre del sat√©lite: ").strip()
                if sat_name:
                    try:
                        hours = int(input("‚è∞ Horas de √≥rbita a mostrar (default 24): ") or "24")
                        print("‚è≥ Generando visualizaci√≥n 2D...")
                        analyzer.plot_orbit(sat_name, hours)
                    except ValueError:
                        print("‚ùå N√∫mero de horas inv√°lido")
                        
            elif option == '7':
                # Visualizaci√≥n 3D de la Tierra con sat√©lites
                print("üåç Visualizaci√≥n 3D de sat√©lites alrededor de la Tierra")
                satellites_input = input("ÔøΩÔ∏è  Nombres de sat√©lites (separados por coma): ").strip()
                if satellites_input:
                    satellite_names = [name.strip() for name in satellites_input.split(',')]
                    try:
                        hours = int(input("‚è∞ Horas de trayectoria (default 12): ") or "12")
                        print("‚è≥ Generando visualizaci√≥n 3D...")
                        analyzer.plot_3d_earth_with_satellites(satellite_names, hours)
                    except ValueError:
                        print("‚ùå N√∫mero de horas inv√°lido")
                        
            elif option == '8':
                # Animaci√≥n orbital 3D
                sat_name = input("üé¨ Nombre del sat√©lite para animar: ").strip()
                if sat_name:
                    try:
                        hours = int(input("‚è∞ Horas de √≥rbita a animar (default 6): ") or "6")
                        frames = int(input("üéûÔ∏è  N√∫mero de frames (default 50): ") or "50")
                        print("‚è≥ Generando animaci√≥n 3D...")
                        analyzer.plot_orbital_animation(sat_name, hours, frames)
                    except ValueError:
                        print("‚ùå Valores inv√°lidos")
                        
            elif option == '8':
                print("ÔøΩüëã ¬°Gracias por usar el Sistema de An√°lisis de Sat√©lites!")
                break
                
            else:
                print("‚ùå Opci√≥n inv√°lida. Selecciona 1-10.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrumpido por el usuario. ¬°Hasta luego!")
            break
        except Exception as e:
            print(f"‚ùå Error inesperado: {str(e)}")


if __name__ == "__main__":
    main()
