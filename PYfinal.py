#!/usr/bin/env python3
"""
Sistema de An√°lisis de Sat√©lites
NASA Space App Challenge 2025

Este sistema permite:
1. Obtener datos de sat√©lites desde Celestrak usando Skyfield
2. Buscar sat√©lites por nombre
3. Calcular √≥rbitas y posiciones futuras
4. Predecir posibles colisiones en los pr√≥ximos 4 d√≠as
5. Visualizar trayectorias orbitales

Autor: NASA Space App Team
Fecha: Octubre 2025
"""

import requests
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import json
import os
from skyfield.api import load, EarthSatellite
from skyfield.timelib import Time
import pandas as pd
from typing import List, Dict, Tuple, Optional
import warnings
warnings.filterwarnings('ignore')

# Importaciones para visualizaci√≥n 3D
from mpl_toolkits.mplot3d import Axes3D
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots


class SatelliteAnalyzer:
    """
    Clase principal para an√°lisis de sat√©lites usando Skyfield y datos de Celestrak
    """
    
    def __init__(self):
        """Inicializar el analizador de sat√©lites"""
        self.ts = load.timescale()
        self.satellites = {}
        self.tle_data = {}
        self.earth = load('de421.bsp')['earth']
        print("üõ∞Ô∏è  Inicializando Sistema de An√°lisis de Sat√©lites...")
        
    def download_tle_data(self, tle_url: str = None) -> bool:
        """
        Descargar datos TLE (Two-Line Elements) desde Celestrak
        
        Args:
            tle_url: URL personalizada para datos TLE
            
        Returns:
            bool: True si la descarga fue exitosa
        """
        try:
            # URLs de diferentes categor√≠as de sat√©lites de Celestrak
            urls = {
                'active': 'https://celestrak.org/NORAD/elements/gp.php?GROUP=active&FORMAT=tle',
                'stations': 'https://celestrak.org/NORAD/elements/gp.php?GROUP=stations&FORMAT=tle',
                'weather': 'https://celestrak.org/NORAD/elements/gp.php?GROUP=weather&FORMAT=tle',
                'communications': 'https://celestrak.org/NORAD/elements/gp.php?GROUP=active&FORMAT=tle',
                'navigation': 'https://celestrak.org/NORAD/elements/gp.php?GROUP=gps-ops&FORMAT=tle'
            }
            
            if tle_url:
                urls['custom'] = tle_url
                
            print("üì° Descargando datos TLE desde Celestrak...")
            
            all_satellites = {}
            for category, url in urls.items():
                try:
                    response = requests.get(url, timeout=30)
                    response.raise_for_status()
                    
                    # Parsear datos TLE
                    lines = response.text.strip().split('\n')
                    i = 0
                    while i < len(lines) - 2:
                        if lines[i].strip() and not lines[i].startswith('#'):
                            name = lines[i].strip()
                            line1 = lines[i + 1].strip()
                            line2 = lines[i + 2].strip()
                            
                            if line1.startswith('1 ') and line2.startswith('2 '):
                                # Crear sat√©lite usando Skyfield
                                satellite = EarthSatellite(line1, line2, name, self.ts)
                                all_satellites[name] = {
                                    'satellite': satellite,
                                    'line1': line1,
                                    'line2': line2,
                                    'category': category
                                }
                        i += 3
                        
                    print(f"   ‚úÖ {category}: {len([s for s in all_satellites.values() if s['category'] == category])} sat√©lites")
                    
                except Exception as e:
                    print(f"   ‚ùå Error descargando {category}: {str(e)}")
                    continue
            
            self.satellites = all_satellites
            print(f"üéØ Total de sat√©lites cargados: {len(self.satellites)}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error descargando datos TLE: {str(e)}")
            return False
    
    def export_satellites_list(self, filename: str = "satelites_disponibles.txt") -> bool:
        """
        Exportar lista de todos los sat√©lites disponibles a un archivo de texto
        
        Args:
            filename: Nombre del archivo a crear
            
        Returns:
            bool: True si la exportaci√≥n fue exitosa
        """
        try:
            if not self.satellites:
                print("‚ùå No hay sat√©lites cargados. Ejecuta download_tle_data() primero.")
                return False
            
            # Organizar sat√©lites por categor√≠a
            satellites_by_category = {}
            for name, data in self.satellites.items():
                category = data['category']
                if category not in satellites_by_category:
                    satellites_by_category[category] = []
                satellites_by_category[category].append(name)
            
            # Ordenar sat√©lites alfab√©ticamente dentro de cada categor√≠a
            for category in satellites_by_category:
                satellites_by_category[category].sort()
            
            # Crear el archivo de texto
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("=" * 80 + "\n")
                f.write("LISTA DE SAT√âLITES DISPONIBLES\n")
                f.write("Sistema de An√°lisis de Sat√©lites - NASA Space App Challenge 2025\n")
                f.write("=" * 80 + "\n")
                f.write(f"Fecha de generaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Total de sat√©lites: {len(self.satellites)}\n")
                f.write("=" * 80 + "\n\n")
                
                # Escribir resumen por categor√≠a
                f.write("RESUMEN POR CATEGOR√çA:\n")
                f.write("-" * 40 + "\n")
                total_count = 0
                for category, sat_list in satellites_by_category.items():
                    count = len(sat_list)
                    total_count += count
                    f.write(f"{category.capitalize():20s}: {count:5d} sat√©lites\n")
                f.write("-" * 40 + "\n")
                f.write(f"{'TOTAL':20s}: {total_count:5d} sat√©lites\n\n")
                
                # Escribir lista detallada por categor√≠a
                for category, sat_list in satellites_by_category.items():
                    f.write("=" * 80 + "\n")
                    f.write(f"CATEGOR√çA: {category.upper()}\n")
                    f.write(f"Total en esta categor√≠a: {len(sat_list)} sat√©lites\n")
                    f.write("=" * 80 + "\n")
                    
                    for i, sat_name in enumerate(sat_list, 1):
                        f.write(f"{i:4d}. {sat_name}\n")
                    
                    f.write("\n")
                
                # Agregar lista alfab√©tica completa
                f.write("=" * 80 + "\n")
                f.write("LISTA ALFAB√âTICA COMPLETA\n")
                f.write("=" * 80 + "\n")
                
                all_satellites = sorted(self.satellites.keys())
                for i, sat_name in enumerate(all_satellites, 1):
                    category = self.satellites[sat_name]['category']
                    f.write(f"{i:5d}. {sat_name:<50s} [{category}]\n")
                
                # Agregar informaci√≥n √∫til al final
                f.write("\n" + "=" * 80 + "\n")
                f.write("INSTRUCCIONES DE USO:\n")
                f.write("=" * 80 + "\n")
                f.write("1. Copia el nombre exacto del sat√©lite que deseas analizar\n")
                f.write("2. P√©galo en el programa cuando se solicite el nombre\n")
                f.write("3. Los nombres son sensibles a may√∫sculas y min√∫sculas\n")
                f.write("4. Usa Ctrl+F para buscar sat√©lites espec√≠ficos en este archivo\n\n")
                
                f.write("EJEMPLOS DE SAT√âLITES INTERESANTES:\n")
                f.write("-" * 40 + "\n")
                
                # Buscar algunos sat√©lites interesantes como ejemplos
                interesting_examples = []
                search_terms = ["ISS", "HUBBLE", "NOAA", "GPS", "STARLINK", "GOES"]
                
                for term in search_terms:
                    matches = [name for name in all_satellites if term in name.upper()]
                    if matches:
                        interesting_examples.append(f"‚Ä¢ {matches[0]} (b√∫squeda: '{term}')")
                
                for example in interesting_examples:
                    f.write(f"{example}\n")
                
                f.write("\n" + "=" * 80 + "\n")
                f.write("¬°Explora el cosmos, un sat√©lite a la vez! üõ∞Ô∏èüåå\n")
                f.write("=" * 80 + "\n")
            
            print(f"‚úÖ Lista de sat√©lites exportada exitosamente:")
            print(f"   üìÅ Archivo: {filename}")
            print(f"   üõ∞Ô∏è  Total de sat√©lites: {len(self.satellites)}")
            print(f"   üìÇ Categor√≠as: {len(satellites_by_category)}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error exportando lista de sat√©lites: {str(e)}")
            return False
    
    def search_satellite(self, search_term: str) -> List[str]:
        """
        Buscar sat√©lites por nombre
        
        Args:
            search_term: T√©rmino de b√∫squeda
            
        Returns:
            List[str]: Lista de nombres de sat√©lites que coinciden
        """
        search_term = search_term.lower()
        matches = []
        
        for name in self.satellites.keys():
            if search_term in name.lower():
                matches.append(name)
                
        return sorted(matches)
    
    def get_popular_satellites(self) -> Dict[str, List[str]]:
        """
        Obtener una lista de sat√©lites populares organizados por categor√≠a
        
        Returns:
            Dict: Diccionario con categor√≠as y sat√©lites populares
        """
        popular_categories = {
            'Estaciones Espaciales': ['ISS', 'ZARYA', 'TIANGONG'],
            'Telescopios Espaciales': ['HUBBLE', 'SPITZER', 'CHANDRA'],
            'Sat√©lites Meteorol√≥gicos': ['NOAA', 'GOES', 'METEOSAT'],
            'Navegaci√≥n GPS': ['GPS', 'NAVSTAR', 'GLONASS'],
            'Comunicaciones': ['STARLINK', 'INTELSAT', 'IRIDIUM'],
            'Observaci√≥n Terrestre': ['LANDSAT', 'AQUA', 'TERRA', 'SENTINEL']
        }
        
        found_satellites = {}
        
        for category, search_terms in popular_categories.items():
            found_satellites[category] = []
            for term in search_terms:
                matches = self.search_satellite(term)
                if matches:
                    # Agregar los primeros 3 matches de cada t√©rmino
                    found_satellites[category].extend(matches[:3])
            
            # Remover duplicados y limitar a 5 por categor√≠a
            found_satellites[category] = list(dict.fromkeys(found_satellites[category]))[:5]
        
        return found_satellites
    
    def suggest_satellites(self, partial_name: str) -> List[str]:
        """
        Sugerir sat√©lites bas√°ndose en un nombre parcial
        
        Args:
            partial_name: Nombre parcial del sat√©lite
            
        Returns:
            List[str]: Lista de sugerencias
        """
        if len(partial_name) < 2:
            return []
        
        partial_name = partial_name.lower()
        suggestions = []
        
        # Buscar coincidencias exactas al inicio del nombre
        for name in self.satellites.keys():
            if name.lower().startswith(partial_name):
                suggestions.append(name)
        
        # Si no hay suficientes, buscar coincidencias en cualquier parte
        if len(suggestions) < 10:
            for name in self.satellites.keys():
                if partial_name in name.lower() and name not in suggestions:
                    suggestions.append(name)
        
        return sorted(suggestions)[:15]  # Limitar a 15 sugerencias
    
    def browse_satellites_by_category(self) -> Dict[str, List[str]]:
        """
        Navegar sat√©lites organizados por categor√≠a
        
        Returns:
            Dict: Sat√©lites organizados por categor√≠a con muestras
        """
        satellites_by_category = {}
        
        for name, data in self.satellites.items():
            category = data['category']
            if category not in satellites_by_category:
                satellites_by_category[category] = []
            satellites_by_category[category].append(name)
        
        # Ordenar y limitar para navegaci√≥n f√°cil
        for category in satellites_by_category:
            satellites_by_category[category] = sorted(satellites_by_category[category])
        
        return satellites_by_category
    
    def show_satellite_examples(self) -> None:
        """
        Mostrar ejemplos de sat√©lites interesantes con descripci√≥n
        """
        examples = {
            "üè† Estaciones Espaciales": {
                "search_terms": ["ISS", "ZARYA", "TIANGONG"],
                "description": "Laboratorios orbitales tripulados"
            },
            "üî≠ Telescopios Espaciales": {
                "search_terms": ["HUBBLE", "SPITZER", "KEPLER"],
                "description": "Observatorios astron√≥micos en el espacio"
            },
            "üå§Ô∏è Sat√©lites Meteorol√≥gicos": {
                "search_terms": ["NOAA", "GOES", "METEOSAT"],
                "description": "Monitoreo del clima y tiempo"
            },
            "üó∫Ô∏è Navegaci√≥n GPS": {
                "search_terms": ["GPS", "NAVSTAR", "GALILEO"],
                "description": "Sistemas de posicionamiento global"
            },
            "üì° Comunicaciones": {
                "search_terms": ["STARLINK", "IRIDIUM", "INTELSAT"],
                "description": "Internet y telecomunicaciones"
            },
            "üåç Observaci√≥n Terrestre": {
                "search_terms": ["LANDSAT", "AQUA", "TERRA"],
                "description": "Monitoreo ambiental y recursos"
            }
        }
        
        print("\nüåü EJEMPLOS DE SAT√âLITES INTERESANTES:")
        print("=" * 60)
        
        for category, info in examples.items():
            print(f"\n{category}")
            print(f"üìù {info['description']}")
            found_examples = []
            
            for term in info['search_terms']:
                matches = self.search_satellite(term)
                if matches:
                    found_examples.extend(matches[:2])  # M√°ximo 2 por t√©rmino
            
            # Mostrar ejemplos √∫nicos
            unique_examples = list(dict.fromkeys(found_examples))[:3]
            for i, example in enumerate(unique_examples, 1):
                print(f"   {i}. {example}")
            
            if not unique_examples:
                print("   (No se encontraron ejemplos en los datos actuales)")
        
        print(f"\nüí° TIP: Usa la opci√≥n 1 para buscar cualquiera de estos nombres")
        print(f"üîç Ejemplo: busca 'ISS' para encontrar la Estaci√≥n Espacial Internacional")
    
    def smart_search(self, search_term: str) -> Dict:
        """
        B√∫squeda inteligente que proporciona resultados y sugerencias
        
        Args:
            search_term: T√©rmino de b√∫squeda
            
        Returns:
            Dict: Resultados detallados con sugerencias
        """
        results = {
            'exact_matches': [],
            'partial_matches': [],
            'suggestions': [],
            'category_matches': {},
            'total_found': 0
        }
        
        if not search_term or len(search_term) < 2:
            return results
        
        search_lower = search_term.lower()
        
        # Buscar coincidencias exactas
        for name in self.satellites.keys():
            name_lower = name.lower()
            if search_lower == name_lower:
                results['exact_matches'].append(name)
            elif search_lower in name_lower:
                results['partial_matches'].append(name)
        
        # Organizar por categor√≠a
        for name in results['partial_matches']:
            category = self.satellites[name]['category']
            if category not in results['category_matches']:
                results['category_matches'][category] = []
            results['category_matches'][category].append(name)
        
        # Generar sugerencias si hay pocos resultados
        if len(results['partial_matches']) < 10:
            results['suggestions'] = self.suggest_satellites(search_term)
        
        results['total_found'] = len(results['exact_matches']) + len(results['partial_matches'])
        
        return results
    
    def get_satellite_info(self, satellite_name: str) -> Optional[Dict]:
        """
        Obtener informaci√≥n detallada de un sat√©lite
        
        Args:
            satellite_name: Nombre del sat√©lite
            
        Returns:
            Dict: Informaci√≥n del sat√©lite o None si no se encuentra
        """
        if satellite_name not in self.satellites:
            return None
            
        sat_data = self.satellites[satellite_name]
        satellite = sat_data['satellite']
        
        # Tiempo actual
        now = self.ts.now()
        
        # Calcular posici√≥n actual
        geocentric = satellite.at(now)
        subpoint = geocentric.subpoint()
        
        # Extraer elementos orbitales del TLE
        line1 = sat_data['line1']
        line2 = sat_data['line2']
        
        # Parsear elementos orbitales
        inclination = float(line2[8:16])
        raan = float(line2[17:25])  # Right Ascension of Ascending Node
        eccentricity = float('0.' + line2[26:33])
        arg_perigee = float(line2[34:42])
        mean_anomaly = float(line2[43:51])
        mean_motion = float(line2[52:63])
        
        # Calcular per√≠odo orbital
        period_minutes = 1440 / mean_motion  # minutos
        period_hours = period_minutes / 60
        
        # Calcular altitud aproximada
        # Usando la tercera ley de Kepler: n = sqrt(GM/a¬≥)
        GM = 398600.4418  # km¬≥/s¬≤
        n_rad_per_sec = mean_motion * 2 * np.pi / 86400  # radianes por segundo
        semi_major_axis = (GM / (n_rad_per_sec ** 2)) ** (1/3)
        
        altitude_km = semi_major_axis - 6371  # Radio terrestre aprox
        
        info = {
            'name': satellite_name,
            'category': sat_data['category'],
            'current_position': {
                'latitude': subpoint.latitude.degrees,
                'longitude': subpoint.longitude.degrees,
                'altitude_km': subpoint.elevation.km
            },
            'orbital_elements': {
                'inclination_deg': inclination,
                'raan_deg': raan,
                'eccentricity': eccentricity,
                'argument_of_perigee_deg': arg_perigee,
                'mean_anomaly_deg': mean_anomaly,
                'mean_motion_rev_per_day': mean_motion,
                'period_hours': period_hours,
                'semi_major_axis_km': semi_major_axis,
                'approx_altitude_km': altitude_km
            },
            'tle_data': {
                'line1': line1,
                'line2': line2
            }
        }
        
        return info
    
    def calculate_future_positions(self, satellite_name: str, days_ahead: int = 180) -> List[Dict]:
        """
        Calcular posiciones futuras del sat√©lite
        
        Args:
            satellite_name: Nombre del sat√©lite
            days_ahead: D√≠as hacia el futuro para calcular
            
        Returns:
            List[Dict]: Posiciones futuras del sat√©lite
        """
        try:
            if satellite_name not in self.satellites:
                print(f"‚ùå Sat√©lite '{satellite_name}' no encontrado en la base de datos")
                # Buscar coincidencias parciales
                matches = [name for name in self.satellites.keys() if satellite_name.lower() in name.lower()]
                if matches:
                    print(f"üí° ¬øTe refieres a alguno de estos?")
                    for i, match in enumerate(matches[:5], 1):
                        print(f"   {i}. {match}")
                return []
                
            satellite = self.satellites[satellite_name]['satellite']
            print(f"‚úÖ Calculando posiciones para: {satellite_name}")
            
            # Crear timestamps para los pr√≥ximos d√≠as
            start_time = self.ts.now()
            positions = []
            
            # Calcular posiciones cada 12 horas
            total_points = days_ahead * 2  # Cada 12 horas = 2 puntos por d√≠a
            print(f"üìä Calculando {total_points} posiciones para {days_ahead} d√≠as...")
            
            for hours in range(0, days_ahead * 24, 12):
                try:
                    t = self.ts.tt_jd(start_time.tt + hours / 24)
                    geocentric = satellite.at(t)
                    subpoint = geocentric.subpoint()
                    
                    positions.append({
                        'datetime': t.utc_datetime(),
                        'latitude': subpoint.latitude.degrees,
                        'longitude': subpoint.longitude.degrees,
                        'altitude_km': subpoint.elevation.km,
                        'x_km': geocentric.position.km[0],
                        'y_km': geocentric.position.km[1],
                        'z_km': geocentric.position.km[2]
                    })
                except Exception as calc_error:
                    print(f"‚ö†Ô∏è  Error calculando posici√≥n para hora {hours}: {calc_error}")
                    continue
                    
            print(f"‚úÖ Calculadas {len(positions)} posiciones exitosamente")
            return positions
            
        except Exception as e:
            print(f"‚ùå Error en calculate_future_positions: {str(e)}")
            return []
    
    def analyze_collision_risk(self, satellite1_name: str, satellite2_name: str = None, 
                             threshold_km: float = 10.0, days_ahead: int = 180) -> Dict:
        """
        Analizar riesgo de colisi√≥n entre sat√©lites
        
        Args:
            satellite1_name: Primer sat√©lite
            satellite2_name: Segundo sat√©lite (si None, analiza contra todos)
            threshold_km: Distancia m√≠nima para considerar riesgo
            days_ahead: D√≠as a analizar hacia el futuro
            
        Returns:
            Dict: An√°lisis de riesgo de colisi√≥n
        """
        if satellite1_name not in self.satellites:
            return {'error': f'Sat√©lite {satellite1_name} no encontrado'}
            
        sat1 = self.satellites[satellite1_name]['satellite']
        close_encounters = []
        
        # Determinar sat√©lites a analizar
        satellites_to_check = {}
        if satellite2_name:
            if satellite2_name in self.satellites:
                satellites_to_check[satellite2_name] = self.satellites[satellite2_name]
        else:
            # Analizar contra una muestra de sat√©lites (primeros 100 para eficiencia)
            sat_names = list(self.satellites.keys())[:100]
            for name in sat_names:
                if name != satellite1_name:
                    satellites_to_check[name] = self.satellites[name]
        
        print(f"üîç Analizando {len(satellites_to_check)} sat√©lites para posibles colisiones...")
        
        # Analizar cada 6 horas durante el per√≠odo especificado
        for hours in range(0, days_ahead * 24, 6):
            t = self.ts.tt_jd(self.ts.now().tt + hours / 24)
            pos1 = sat1.at(t)
            
            for sat2_name, sat2_data in satellites_to_check.items():
                sat2 = sat2_data['satellite']
                pos2 = sat2.at(t)
                
                # Calcular distancia entre sat√©lites
                distance_km = np.linalg.norm(
                    np.array(pos1.position.km) - np.array(pos2.position.km)
                )
                
                if distance_km < threshold_km:
                    close_encounters.append({
                        'datetime': t.utc_datetime(),
                        'satellite2': sat2_name,
                        'distance_km': distance_km,
                        'satellite1_pos': pos1.position.km,
                        'satellite2_pos': pos2.position.km
                    })
        
        # Calcular estad√≠sticas de riesgo
        risk_level = 'BAJO'
        if close_encounters:
            min_distance = min(enc['distance_km'] for enc in close_encounters)
            if min_distance < 1.0:
                risk_level = 'CR√çTICO'
            elif min_distance < 5.0:
                risk_level = 'ALTO'
            else:
                risk_level = 'MEDIO'
        
        return {
            'satellite': satellite1_name,
            'analysis_period_days': days_ahead,
            'threshold_km': threshold_km,
            'close_encounters': close_encounters,
            'risk_level': risk_level,
            'total_encounters': len(close_encounters),
            'satellites_analyzed': len(satellites_to_check)
        }
    
    def calculate_maneuver_time(self, v_rel: float, R_req: float = 1000.0, 
                              sigma_0: float = 100.0, k: float = 0.001, n: float = 3.0) -> Dict:
        """
        Calcular el tiempo necesario para iniciar maniobras de evasi√≥n de colisi√≥n
        
        Basado en la ecuaci√≥n: t ‚â• (R_req + n¬∑œÉ‚ÇÄ) / (v_rel ‚àí n¬∑k)
        
        Args:
            v_rel: Velocidad relativa entre objetos (m/s)
                  En LEO: ~100 m/s hasta ~14,000 m/s (encuentros frontales)
            R_req: Distancia de seguridad deseada (m). Ej: 100-1000 m
            sigma_0: Incertidumbre posicional actual (1-sigma, m)
            k: Tasa de crecimiento de incertidumbre (m/s)
            n: Factor de confianza (ej: 3 para 3œÉ)
            
        Returns:
            Dict: An√°lisis del tiempo de maniobra
        """
        try:
            # Validar par√°metros de entrada
            if v_rel <= 0:
                return {'error': 'La velocidad relativa debe ser positiva'}
            
            if R_req <= 0:
                return {'error': 'La distancia de seguridad debe ser positiva'}
            
            if sigma_0 < 0:
                return {'error': 'La incertidumbre posicional no puede ser negativa'}
            
            # Calcular componentes de la ecuaci√≥n
            numerador = R_req + n * sigma_0
            denominador = v_rel - n * k
            
            # Verificar que el denominador sea positivo
            if denominador <= 0:
                return {
                    'error': 'Configuraci√≥n inv√°lida',
                    'reason': 'La velocidad relativa es insuficiente comparada con el crecimiento de incertidumbre',
                    'recommendation': 'Reducir el factor de confianza (n) o mejorar la precisi√≥n orbital (reducir k)',
                    'v_rel': v_rel,
                    'n_k': n * k,
                    'deficit': abs(denominador)
                }
            
            # Calcular tiempo de maniobra
            t_maneuver_seconds = numerador / denominador
            
            # Convertir a diferentes unidades
            t_minutes = t_maneuver_seconds / 60
            t_hours = t_minutes / 60
            t_days = t_hours / 24
            
            # Determinar criticidad basada en el tiempo disponible
            if t_hours < 1:
                criticidad = "üî¥ CR√çTICO"
                recomendacion = "Maniobra inmediata requerida"
            elif t_hours < 6:
                criticidad = "üü† ALTO"
                recomendacion = "Preparar maniobra en las pr√≥ximas horas"
            elif t_hours < 24:
                criticidad = "üü° MEDIO"
                recomendacion = "Planificar maniobra para hoy"
            elif t_days < 7:
                criticidad = "üü¢ BAJO"
                recomendacion = "Maniobra puede planificarse con anticipaci√≥n"
            else:
                criticidad = "üîµ M√çNIMO"
                recomendacion = "Tiempo suficiente para an√°lisis detallado"
            
            # Calcular escenarios alternativos
            escenarios = []
            
            # Escenario conservador (n=2)
            if n != 2:
                t_conservador = (R_req + 2 * sigma_0) / (v_rel - 2 * k) if (v_rel - 2 * k) > 0 else None
                if t_conservador:
                    escenarios.append({
                        'nombre': 'Conservador (2œÉ)',
                        'tiempo_segundos': t_conservador,
                        'tiempo_horas': t_conservador / 3600
                    })
            
            # Escenario agresivo (n=1)
            if n != 1:
                t_agresivo = (R_req + 1 * sigma_0) / (v_rel - 1 * k) if (v_rel - 1 * k) > 0 else None
                if t_agresivo:
                    escenarios.append({
                        'nombre': 'Agresivo (1œÉ)',
                        'tiempo_segundos': t_agresivo,
                        'tiempo_horas': t_agresivo / 3600
                    })
            
            # An√°lisis de sensibilidad
            sensibilidad = {
                'impacto_v_rel': {
                    'descripcion': 'Efecto de ¬±10% en velocidad relativa',
                    'v_rel_high': v_rel * 1.1,
                    't_high': (numerador) / (v_rel * 1.1 - n * k) if (v_rel * 1.1 - n * k) > 0 else None,
                    'v_rel_low': v_rel * 0.9,
                    't_low': (numerador) / (v_rel * 0.9 - n * k) if (v_rel * 0.9 - n * k) > 0 else None
                },
                'impacto_incertidumbre': {
                    'descripcion': 'Efecto de ¬±50% en incertidumbre',
                    'sigma_high': sigma_0 * 1.5,
                    't_sigma_high': (R_req + n * sigma_0 * 1.5) / denominador,
                    'sigma_low': sigma_0 * 0.5,
                    't_sigma_low': (R_req + n * sigma_0 * 0.5) / denominador
                }
            }
            
            return {
                'parametros': {
                    'v_rel_ms': v_rel,
                    'R_req_m': R_req,
                    'sigma_0_m': sigma_0,
                    'k_ms': k,
                    'factor_confianza': n
                },
                'tiempo_maniobra': {
                    'segundos': t_maneuver_seconds,
                    'minutos': t_minutes,
                    'horas': t_hours,
                    'dias': t_days
                },
                'evaluacion': {
                    'criticidad': criticidad,
                    'recomendacion': recomendacion
                },
                'componentes_calculo': {
                    'numerador': numerador,
                    'denominador': denominador,
                    'margen_seguridad': denominador - n * k
                },
                'escenarios_alternativos': escenarios,
                'analisis_sensibilidad': sensibilidad,
                'interpretacion': {
                    'contexto_leo': self._get_leo_context(v_rel),
                    'recomendaciones_operacionales': self._get_operational_recommendations(t_hours, v_rel)
                }
            }
            
        except Exception as e:
            return {'error': f'Error en c√°lculo: {str(e)}'}
    
    def _get_leo_context(self, v_rel: float) -> Dict:
        """Proporcionar contexto espec√≠fico para √≥rbitas LEO"""
        if v_rel < 500:
            tipo_encuentro = "Co-orbital o encuentro suave"
            descripcion = "Sat√©lites en √≥rbitas similares con baja velocidad relativa"
        elif v_rel < 2000:
            tipo_encuentro = "Encuentro lateral"
            descripcion = "Cruce de √≥rbitas con √°ngulo moderado"
        elif v_rel < 8000:
            tipo_encuentro = "Encuentro perpendicular"
            descripcion = "√ìrbitas con planos orbitales diferentes"
        else:
            tipo_encuentro = "Encuentro frontal"
            descripcion = "√ìrbitas con inclinaciones opuestas - m√°ximo riesgo"
            
        return {
            'tipo_encuentro': tipo_encuentro,
            'descripcion': descripcion,
            'velocidad_relativa_ms': v_rel,
            'velocidad_relativa_kmh': v_rel * 3.6
        }
    
    def _get_operational_recommendations(self, t_hours: float, v_rel: float) -> List[str]:
        """Generar recomendaciones operacionales espec√≠ficas"""
        recomendaciones = []
        
        if t_hours < 1:
            recomendaciones.extend([
                "üö® Activar protocolo de emergencia",
                "üì° Contactar inmediatamente con el centro de control",
                "‚ö° Ejecutar maniobra de emergencia pre-programada",
                "üìä Monitoreo continuo de telemetr√≠a"
            ])
        elif t_hours < 6:
            recomendaciones.extend([
                "üìã Preparar plan de maniobra detallado",
                "üîç Refinar datos orbitales con mediciones adicionales",
                "üë• Notificar a otros operadores satelitales",
                "‚öôÔ∏è Verificar sistemas de propulsi√≥n"
            ])
        elif t_hours < 24:
            recomendaciones.extend([
                "üìà Realizar an√°lisis de conjunci√≥n detallado",
                "üõ∞Ô∏è Considerar maniobras coordinadas si aplica",
                "üì° Incrementar frecuencia de tracking",
                "üíæ Documentar procedimientos para caso similar"
            ])
        else:
            recomendaciones.extend([
                "üî¨ An√°lisis exhaustivo de m√∫ltiples escenarios",
                "ü§ù Coordinaci√≥n con agencias espaciales",
                "üìä Optimizaci√≥n de combustible para maniobra",
                "üéØ Planificaci√≥n de maniobra de precisi√≥n"
            ])
            
        # Recomendaciones espec√≠ficas por velocidad relativa
        if v_rel > 10000:
            recomendaciones.append("‚ö†Ô∏è Encuentro de alta velocidad - considerar maniobra temprana")
        elif v_rel < 500:
            recomendaciones.append("üîÑ Encuentro lento - maniobra de larga duraci√≥n posible")
            
        return recomendaciones
    
    def plot_orbit(self, satellite_name: str, hours: int = 24) -> bool:
        """
        Visualizar la √≥rbita de un sat√©lite
        
        Args:
            satellite_name: Nombre del sat√©lite
            hours: Horas de √≥rbita a mostrar
            
        Returns:
            bool: True si el plot fue exitoso
        """
        if satellite_name not in self.satellites:
            print(f"‚ùå Sat√©lite {satellite_name} no encontrado")
            return False
            
        satellite = self.satellites[satellite_name]['satellite']
        
        # Calcular posiciones para la visualizaci√≥n
        positions = []
        times = []
        
        start_time = self.ts.now()
        for minutes in range(0, hours * 60, 10):  # Cada 10 minutos
            t = self.ts.tt_jd(start_time.tt + minutes / (24 * 60))
            geocentric = satellite.at(t)
            subpoint = geocentric.subpoint()
            
            positions.append([
                subpoint.longitude.degrees,
                subpoint.latitude.degrees
            ])
            times.append(t.utc_datetime())
        
        positions = np.array(positions)
        
        # Crear el plot
        plt.figure(figsize=(15, 8))
        
        # Subplot 1: Trayectoria en mapa mundial
        plt.subplot(1, 2, 1)
        plt.plot(positions[:, 0], positions[:, 1], 'b-', linewidth=2, alpha=0.7)
        plt.scatter(positions[0, 0], positions[0, 1], color='green', s=100, 
                   label='Inicio', zorder=5)
        plt.scatter(positions[-1, 0], positions[-1, 1], color='red', s=100, 
                   label='Fin', zorder=5)
        
        plt.xlim(-180, 180)
        plt.ylim(-90, 90)
        plt.xlabel('Longitud (¬∞)')
        plt.ylabel('Latitud (¬∞)')
        plt.title(f'Trayectoria Orbital: {satellite_name}\n({hours} horas)')
        plt.grid(True, alpha=0.3)
        plt.legend()
        
        # Agregar l√≠neas de referencia
        plt.axhline(y=0, color='k', linestyle='--', alpha=0.3)
        plt.axvline(x=0, color='k', linestyle='--', alpha=0.3)
        
        # Subplot 2: Altitud vs tiempo
        plt.subplot(1, 2, 2)
        altitudes = []
        for minutes in range(0, hours * 60, 10):
            t = self.ts.tt_jd(start_time.tt + minutes / (24 * 60))
            geocentric = satellite.at(t)
            subpoint = geocentric.subpoint()
            altitudes.append(subpoint.elevation.km)
        
        time_hours = [i/6 for i in range(len(altitudes))]  # Cada 10 min = 1/6 hora
        plt.plot(time_hours, altitudes, 'r-', linewidth=2)
        plt.xlabel('Tiempo (horas)')
        plt.ylabel('Altitud (km)')
        plt.title('Variaci√≥n de Altitud')
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # Guardar el plot
        filename = f"orbit_{satellite_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"üìä Gr√°fico guardado como: {filename}")
        
        plt.show()
        return True
    
    def plot_3d_earth_with_satellites(self, satellite_names: List[str], hours: int = 24) -> bool:
        """
        Visualizaci√≥n 3D de la Tierra con trayectorias de sat√©lites
        
        Args:
            satellite_names: Lista de nombres de sat√©lites a visualizar
            hours: Horas de √≥rbita a mostrar
            
        Returns:
            bool: True si la visualizaci√≥n fue exitosa
        """
        if not satellite_names:
            print("‚ùå No se proporcionaron nombres de sat√©lites")
            return False
        
        # Verificar que los sat√©lites existen
        valid_satellites = []
        for name in satellite_names:
            if name in self.satellites:
                valid_satellites.append(name)
            else:
                print(f"‚ö†Ô∏è  Sat√©lite {name} no encontrado")
        
        if not valid_satellites:
            print("‚ùå No se encontraron sat√©lites v√°lidos")
            return False
        
        print(f"üåç Generando visualizaci√≥n 3D para {len(valid_satellites)} sat√©lite(s)...")
        
        # Crear figura de Plotly
        fig = go.Figure()
        
        # Agregar la Tierra como una esfera
        u = np.linspace(0, 2 * np.pi, 50)
        v = np.linspace(0, np.pi, 50)
        x_earth = 6371 * np.outer(np.cos(u), np.sin(v))  # Radio de la Tierra: 6371 km
        y_earth = 6371 * np.outer(np.sin(u), np.sin(v))
        z_earth = 6371 * np.outer(np.ones(np.size(u)), np.cos(v))
        
        fig.add_trace(go.Surface(
            x=x_earth, y=y_earth, z=z_earth,
            colorscale='Blues',
            opacity=0.7,
            name='Tierra',
            showscale=False,
            hovertemplate='Tierra<extra></extra>'
        ))
        
        # Colores para diferentes sat√©lites
        colors = ['red', 'blue', 'green', 'orange', 'purple', 'yellow', 'pink', 'cyan']
        
        # Agregar trayectorias de sat√©lites
        for i, satellite_name in enumerate(valid_satellites):
            satellite = self.satellites[satellite_name]['satellite']
            color = colors[i % len(colors)]
            
            # Calcular posiciones del sat√©lite
            positions_3d = []
            times = []
            
            start_time = self.ts.now()
            for minutes in range(0, hours * 60, 15):  # Cada 15 minutos para mejor rendimiento
                t = self.ts.tt_jd(start_time.tt + minutes / (24 * 60))
                geocentric = satellite.at(t)
                
                # Convertir a coordenadas cartesianas (km)
                position = geocentric.position.km
                positions_3d.append(position)
                times.append(t.utc_datetime())
            
            positions_3d = np.array(positions_3d)
            
            # Agregar trayectoria del sat√©lite
            fig.add_trace(go.Scatter3d(
                x=positions_3d[:, 0],
                y=positions_3d[:, 1], 
                z=positions_3d[:, 2],
                mode='lines+markers',
                line=dict(color=color, width=4),
                marker=dict(size=3, color=color),
                name=f'{satellite_name}',
                hovertemplate=f'<b>{satellite_name}</b><br>' +
                            'X: %{x:.1f} km<br>' +
                            'Y: %{y:.1f} km<br>' +
                            'Z: %{z:.1f} km<extra></extra>'
            ))
            
            # Marcar posici√≥n inicial y final
            fig.add_trace(go.Scatter3d(
                x=[positions_3d[0, 0]],
                y=[positions_3d[0, 1]],
                z=[positions_3d[0, 2]],
                mode='markers',
                marker=dict(size=8, color='lightgreen', symbol='diamond'),
                name=f'{satellite_name} - Inicio',
                showlegend=False,
                hovertemplate=f'<b>{satellite_name} - Inicio</b><br>' +
                            'X: %{x:.1f} km<br>' +
                            'Y: %{y:.1f} km<br>' +
                            'Z: %{z:.1f} km<extra></extra>'
            ))
            
            fig.add_trace(go.Scatter3d(
                x=[positions_3d[-1, 0]],
                y=[positions_3d[-1, 1]],
                z=[positions_3d[-1, 2]],
                mode='markers',
                marker=dict(size=8, color='darkred', symbol='cross'),
                name=f'{satellite_name} - Final',
                showlegend=False,
                hovertemplate=f'<b>{satellite_name} - Final</b><br>' +
                            'X: %{x:.1f} km<br>' +
                            'Y: %{y:.1f} km<br>' +
                            'Z: %{z:.1f} km<extra></extra>'
            ))
        
        # Configurar el layout
        fig.update_layout(
            title=f'üõ∞Ô∏è Visualizaci√≥n 3D: Sat√©lites alrededor de la Tierra<br>' +
                  f'<sub>Trayectorias de {hours} horas - {len(valid_satellites)} sat√©lite(s)</sub>',
            scene=dict(
                xaxis_title='X (km)',
                yaxis_title='Y (km)',
                zaxis_title='Z (km)',
                aspectmode='cube',
                camera=dict(
                    eye=dict(x=2, y=2, z=2)
                ),
                bgcolor='black'
            ),
            font=dict(size=12),
            width=1000,
            height=800,
            margin=dict(l=0, r=0, t=50, b=0)
        )
        
        # Mostrar la visualizaci√≥n
        fig.show()
        
        # Guardar como HTML interactivo
        filename = f"satellite_3d_visualization_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        fig.write_html(filename)
        print(f"üåç Visualizaci√≥n 3D guardada como: {filename}")
        
        return True
    
    def comprehensive_collision_analysis(self, satellite1_name: str, satellite2_name: str = None,
                                       threshold_km: float = 10.0, days_ahead: int = 7) -> Dict:
        """
        An√°lisis completo de colisi√≥n incluyendo c√°lculo de tiempo de maniobra
        
        Args:
            satellite1_name: Primer sat√©lite a analizar
            satellite2_name: Segundo sat√©lite (si None, analiza contra muestra)
            threshold_km: Distancia m√≠nima para considerar riesgo (km)
            days_ahead: D√≠as a analizar hacia el futuro
            
        Returns:
            Dict: An√°lisis completo de colisi√≥n y tiempo de maniobra
        """
        print(f"üîç Iniciando an√°lisis completo de colisi√≥n para {satellite1_name}...")
        
        # Realizar an√°lisis de colisi√≥n b√°sico
        collision_analysis = self.analyze_collision_risk(
            satellite1_name, satellite2_name, threshold_km, days_ahead
        )
        
        if 'error' in collision_analysis:
            return collision_analysis
        
        # Si hay encuentros cercanos, calcular par√°metros de maniobra
        maneuver_analyses = []
        
        if collision_analysis['close_encounters']:
            print(f"‚ö†Ô∏è  {len(collision_analysis['close_encounters'])} encuentros cercanos detectados")
            
            for encounter in collision_analysis['close_encounters'][:5]:  # Analizar los primeros 5
                # Calcular velocidad relativa estimada para el encuentro
                sat1_pos = np.array(encounter['satellite1_pos'])
                sat2_pos = np.array(encounter['satellite2_pos'])
                distance_km = encounter['distance_km']
                
                # Estimar velocidad relativa basada en la √≥rbita LEO t√≠pica
                # Para sat√©lites LEO: velocidad orbital ~7.8 km/s
                orbital_velocity = 7800  # m/s
                
                # Estimar velocidad relativa basada en el tipo de encuentro
                if distance_km < 1:
                    # Encuentro muy cercano, probablemente frontal
                    v_rel_estimate = orbital_velocity * 1.8  # ~14,000 m/s
                elif distance_km < 5:
                    # Encuentro cercano, √°ngulo moderado  
                    v_rel_estimate = orbital_velocity * 1.2  # ~9,400 m/s
                else:
                    # Encuentro lejano, paralelo
                    v_rel_estimate = orbital_velocity * 0.2  # ~1,560 m/s
                
                # Par√°metros t√≠picos para an√°lisis
                params_scenarios = [
                    {
                        'nombre': 'Conservador',
                        'R_req': 1000,  # 1 km de seguridad
                        'sigma_0': 200,  # 200 m de incertidumbre
                        'k': 0.002,     # Crecimiento moderado
                        'n': 3          # 3 sigma
                    },
                    {
                        'nombre': 'Est√°ndar',
                        'R_req': 500,   # 500 m de seguridad
                        'sigma_0': 100,  # 100 m de incertidumbre
                        'k': 0.001,     # Crecimiento normal
                        'n': 2.5        # 2.5 sigma
                    },
                    {
                        'nombre': 'Agresivo',
                        'R_req': 200,   # 200 m de seguridad
                        'sigma_0': 50,   # 50 m de incertidumbre
                        'k': 0.0005,    # Bajo crecimiento
                        'n': 2          # 2 sigma
                    }
                ]
                
                encounter_maneuvers = []
                
                for scenario in params_scenarios:
                    maneuver_calc = self.calculate_maneuver_time(
                        v_rel=v_rel_estimate,
                        R_req=scenario['R_req'],
                        sigma_0=scenario['sigma_0'],
                        k=scenario['k'],
                        n=scenario['n']
                    )
                    
                    if 'error' not in maneuver_calc:
                        encounter_maneuvers.append({
                            'escenario': scenario['nombre'],
                            'parametros': scenario,
                            'tiempo_maniobra': maneuver_calc['tiempo_maniobra'],
                            'criticidad': maneuver_calc['evaluacion']['criticidad'],
                            'recomendacion': maneuver_calc['evaluacion']['recomendacion']
                        })
                
                maneuver_analyses.append({
                    'encuentro': {
                        'fecha': encounter['datetime'].strftime('%Y-%m-%d %H:%M:%S UTC'),
                        'satelite_2': encounter['satellite2'],
                        'distancia_km': distance_km,
                        'velocidad_relativa_estimada': v_rel_estimate
                    },
                    'analisis_maniobra': encounter_maneuvers
                })
        
        # Generar recomendaciones generales
        recomendaciones_generales = self._generate_general_recommendations(
            collision_analysis, maneuver_analyses
        )
        
        # Calcular tiempo hasta primer encuentro
        tiempo_primer_encuentro = None
        if collision_analysis['close_encounters']:
            primer_encuentro = min(collision_analysis['close_encounters'], 
                                 key=lambda x: x['datetime'])
            tiempo_primer_encuentro = {
                'fecha': primer_encuentro['datetime'],
                'horas_restantes': (primer_encuentro['datetime'] - datetime.now()).total_seconds() / 3600,
                'distancia_km': primer_encuentro['distance_km']
            }
        
        return {
            'analisis_colision': collision_analysis,
            'analisis_maniobras': maneuver_analyses,
            'tiempo_primer_encuentro': tiempo_primer_encuentro,
            'recomendaciones_generales': recomendaciones_generales,
            'resumen_ejecutivo': self._generate_executive_summary(
                collision_analysis, maneuver_analyses, tiempo_primer_encuentro
            )
        }
    
    def _generate_general_recommendations(self, collision_analysis: Dict, 
                                        maneuver_analyses: List[Dict]) -> List[str]:
        """Generar recomendaciones generales basadas en el an√°lisis"""
        recommendations = []
        
        risk_level = collision_analysis.get('risk_level', 'BAJO')
        total_encounters = collision_analysis.get('total_encounters', 0)
        
        if risk_level == 'CR√çTICO':
            recommendations.extend([
                "üö® ALERTA CR√çTICA: Implementar protocolo de emergencia inmediatamente",
                "üì° Establecer comunicaci√≥n continua con centros de control",
                "‚ö° Preparar maniobra de emergencia autom√°tica",
                "üéØ Considerar m√∫ltiples opciones de maniobra"
            ])
        elif risk_level == 'ALTO':
            recommendations.extend([
                "‚ö†Ô∏è RIESGO ALTO: Planificar maniobra en las pr√≥ximas 24 horas",
                "üìä Refinar datos orbitales con tracking adicional",
                "ü§ù Coordinar con otros operadores si es necesario",
                "üìã Preparar plan de contingencia"
            ])
        elif risk_level == 'MEDIO':
            recommendations.extend([
                "üü° RIESGO MEDIO: Monitoreo incrementado requerido",
                "üìà An√°lisis detallado de conjunci√≥n",
                "üîç Evaluaci√≥n de opciones de maniobra",
                "üìÖ Planificaci√≥n preventiva"
            ])
        
        if total_encounters > 3:
            recommendations.append(f"üìä M√∫ltiples encuentros ({total_encounters}) - considerar cambio orbital mayor")
        
        if maneuver_analyses:
            min_time = min([
                min([m['tiempo_maniobra']['horas'] for m in analysis['analisis_maniobra']])
                for analysis in maneuver_analyses if analysis['analisis_maniobra']
            ], default=float('inf'))
            
            if min_time < 1:
                recommendations.append("‚è∞ Tiempo de maniobra < 1 hora - Acci√≥n inmediata requerida")
            elif min_time < 6:
                recommendations.append("‚è∞ Tiempo de maniobra < 6 horas - Preparaci√≥n urgente")
        
        return recommendations
    
    def _generate_executive_summary(self, collision_analysis: Dict, 
                                  maneuver_analyses: List[Dict], 
                                  primer_encuentro: Dict) -> Dict:
        """Generar resumen ejecutivo del an√°lisis"""
        
        summary = {
            'satelite': collision_analysis.get('satellite', 'Desconocido'),
            'nivel_riesgo': collision_analysis.get('risk_level', 'BAJO'),
            'total_encuentros': collision_analysis.get('total_encounters', 0),
            'periodo_analisis_dias': collision_analysis.get('analysis_period_days', 0)
        }
        
        if primer_encuentro:
            summary['primer_encuentro'] = {
                'tiempo_horas': primer_encuentro['horas_restantes'],
                'distancia_km': primer_encuentro['distancia_km'],
                'fecha': primer_encuentro['fecha'].strftime('%Y-%m-%d %H:%M UTC')
            }
        
        if maneuver_analyses:
            # Tiempo m√≠nimo de maniobra entre todos los escenarios
            tiempos_maniobra = []
            for analysis in maneuver_analyses:
                for maneuver in analysis['analisis_maniobra']:
                    tiempos_maniobra.append(maneuver['tiempo_maniobra']['horas'])
            
            if tiempos_maniobra:
                summary['tiempo_maniobra'] = {
                    'minimo_horas': min(tiempos_maniobra),
                    'maximo_horas': max(tiempos_maniobra),
                    'promedio_horas': sum(tiempos_maniobra) / len(tiempos_maniobra)
                }
        
        # Determinar acci√≥n recomendada
        if summary['nivel_riesgo'] == 'CR√çTICO':
            summary['accion_recomendada'] = "MANIOBRA INMEDIATA"
        elif summary['nivel_riesgo'] == 'ALTO':
            summary['accion_recomendada'] = "PREPARAR MANIOBRA URGENTE"
        elif summary['nivel_riesgo'] == 'MEDIO':
            summary['accion_recomendada'] = "MONITOREO INCREMENTADO"
        else:
            summary['accion_recomendada'] = "SEGUIMIENTO RUTINARIO"
        
        return summary
    
    def find_collision_cases(self, threshold_km: float = 50.0, days_ahead: int = 7, 
                           max_satellites: int = 500) -> List[Dict]:
        """
        Buscar casos reales de colisi√≥n entre sat√©lites
        Funci√≥n espec√≠fica para encontrar encuentros cercanos reales
        
        Args:
            threshold_km: Distancia m√°xima para considerar encuentro cercano
            days_ahead: D√≠as a analizar
            max_satellites: M√°ximo n√∫mero de sat√©lites a analizar
            
        Returns:
            List[Dict]: Lista de casos de colisi√≥n encontrados
        """
        print(f"üîç B√öSQUEDA EXHAUSTIVA DE CASOS DE COLISI√ìN")
        print(f"üìä Analizando hasta {max_satellites} sat√©lites...")
        print(f"üìè Umbral: {threshold_km} km | üìÖ Per√≠odo: {days_ahead} d√≠as")
        print("-" * 60)
        
        collision_cases = []
        satellites_list = list(self.satellites.keys())
        
        # Analizar una muestra m√°s grande de sat√©lites
        sample_size = min(max_satellites, len(satellites_list))
        sample_satellites = satellites_list[:sample_size]
        
        analyzed_pairs = set()  # Evitar analizar el mismo par dos veces
        
        for i, sat1_name in enumerate(sample_satellites):
            if i % 50 == 0:  # Mostrar progreso cada 50 sat√©lites
                progress = (i / sample_size) * 100
                print(f"üìà Progreso: {progress:.1f}% ({i}/{sample_size}) - Casos encontrados: {len(collision_cases)}")
            
            try:
                sat1 = self.satellites[sat1_name]['satellite']
                
                # Analizar contra una submuestra de otros sat√©lites
                for j, sat2_name in enumerate(sample_satellites[i+1:i+51], i+1):  # Siguientes 50
                    if j >= len(sample_satellites):
                        break
                        
                    pair = tuple(sorted([sat1_name, sat2_name]))
                    if pair in analyzed_pairs:
                        continue
                    analyzed_pairs.add(pair)
                    
                    try:
                        sat2 = self.satellites[sat2_name]['satellite']
                        
                        # Verificar encuentros cada 2 horas para mayor precisi√≥n
                        for hours in range(0, days_ahead * 24, 2):
                            t = self.ts.tt_jd(self.ts.now().tt + hours / 24)
                            
                            pos1 = sat1.at(t)
                            pos2 = sat2.at(t)
                            
                            # Calcular distancia
                            distance_km = np.linalg.norm(
                                np.array(pos1.position.km) - np.array(pos2.position.km)
                            )
                            
                            if distance_km < threshold_km:
                                # ¬°Encontramos un caso de colisi√≥n!
                                collision_cases.append({
                                    'satellite1': sat1_name,
                                    'satellite2': sat2_name,
                                    'datetime': t.utc_datetime(),
                                    'distance_km': distance_km,
                                    'hours_from_now': hours,
                                    'satellite1_pos': pos1.position.km,
                                    'satellite2_pos': pos2.position.km,
                                    'relative_velocity_estimated': self._estimate_relative_velocity(
                                        pos1.position.km, pos2.position.km, distance_km
                                    )
                                })
                                
                                print(f"üö® CASO ENCONTRADO: {sat1_name} vs {sat2_name}")
                                print(f"   üìÖ {t.utc_datetime().strftime('%Y-%m-%d %H:%M')} UTC")
                                print(f"   üìè Distancia: {distance_km:.2f} km")
                                
                                # Si encontramos varios casos, no necesitamos m√°s
                                if len(collision_cases) >= 5:
                                    print(f"‚úÖ Suficientes casos encontrados. Deteniendo b√∫squeda.")
                                    return collision_cases
                                    
                    except Exception as e:
                        continue  # Continuar con el siguiente sat√©lite
                        
            except Exception as e:
                continue  # Continuar con el siguiente sat√©lite principal
        
        print(f"‚úÖ B√∫squeda completada. Casos encontrados: {len(collision_cases)}")
        return collision_cases
    
    def _estimate_relative_velocity(self, pos1: np.ndarray, pos2: np.ndarray, 
                                  distance_km: float) -> float:
        """Estimar velocidad relativa basada en posiciones y distancia"""
        # Velocidad orbital t√≠pica en LEO
        orbital_speed = 7800  # m/s
        
        # Estimar basado en la distancia del encuentro
        if distance_km < 5:
            return orbital_speed * 1.8  # Encuentro frontal probable
        elif distance_km < 20:
            return orbital_speed * 1.2  # Encuentro angular
        else:
            return orbital_speed * 0.5  # Encuentro lateral
    
    def demonstrate_collision_case(self) -> None:
        """
        Demostrar un caso de colisi√≥n encontrado con an√°lisis completo
        """
        print("üîç DEMOSTRACI√ìN DE CASO DE COLISI√ìN REAL")
        print("=" * 60)
        
        # Buscar casos de colisi√≥n
        cases = self.find_collision_cases(threshold_km=100, days_ahead=3, max_satellites=200)
        
        if not cases:
            print("‚ùå No se encontraron casos de colisi√≥n en la muestra analizada")
            print("üí° Esto puede ocurrir porque:")
            print("   ‚Ä¢ Los sat√©lites est√°n bien separados")
            print("   ‚Ä¢ La muestra analizada es peque√±a")
            print("   ‚Ä¢ Los umbrales son muy estrictos")
            print("\nüé≠ Generando caso simulado para demostraci√≥n...")
            
            # Crear un caso simulado basado en datos reales
            self._create_simulated_case()
            return
        
        # Analizar el primer caso encontrado
        case = cases[0]
        print(f"\nüö® CASO DE COLISI√ìN DETECTADO:")
        print(f"üõ∞Ô∏è  Sat√©lite 1: {case['satellite1']}")
        print(f"üõ∞Ô∏è  Sat√©lite 2: {case['satellite2']}")
        print(f"üìÖ Fecha/Hora: {case['datetime'].strftime('%Y-%m-%d %H:%M')} UTC")
        print(f"üìè Distancia: {case['distance_km']:.2f} km")
        print(f"‚è∞ En: {case['hours_from_now']} horas")
        
        # Calcular tiempo de maniobra para este caso
        v_rel = case['relative_velocity_estimated']
        print(f"\n‚ö° AN√ÅLISIS DE TIEMPO DE MANIOBRA:")
        print(f"üöÄ Velocidad relativa estimada: {v_rel:.0f} m/s")
        
        # Varios escenarios de maniobra
        scenarios = [
            {'name': 'Conservador', 'R_req': 2000, 'sigma_0': 200, 'k': 0.002, 'n': 3},
            {'name': 'Est√°ndar', 'R_req': 1000, 'sigma_0': 100, 'k': 0.001, 'n': 2.5},
            {'name': 'Agresivo', 'R_req': 500, 'sigma_0': 50, 'k': 0.0008, 'n': 2}
        ]
        
        print(f"\nüìä ESCENARIOS DE MANIOBRA:")
        for scenario in scenarios:
            result = self.calculate_maneuver_time(
                v_rel=v_rel,
                R_req=scenario['R_req'],
                sigma_0=scenario['sigma_0'],
                k=scenario['k'],
                n=scenario['n']
            )
            
            if 'error' not in result:
                tiempo = result['tiempo_maniobra']
                print(f"   ‚Ä¢ {scenario['name']}: {tiempo['horas']:.2f} horas")
                print(f"     {result['evaluacion']['criticidad']}")
            else:
                print(f"   ‚Ä¢ {scenario['name']}: {result['error']}")
        
        # Mostrar todos los casos encontrados
        if len(cases) > 1:
            print(f"\nüìã OTROS CASOS DETECTADOS:")
            for i, other_case in enumerate(cases[1:], 2):
                print(f"   {i}. {other_case['satellite1']} vs {other_case['satellite2']}")
                print(f"      üìÖ {other_case['datetime'].strftime('%Y-%m-%d %H:%M')} UTC")
                print(f"      üìè {other_case['distance_km']:.2f} km")
    
    def _create_simulated_case(self) -> None:
        """Crear un caso simulado basado en sat√©lites reales"""
        print("üé≠ CASO SIMULADO DE DEMOSTRACI√ìN:")
        print("=" * 50)
        
        # Usar sat√©lites reales para crear escenario cre√≠ble
        satellite_names = list(self.satellites.keys())
        sat1 = satellite_names[10] if len(satellite_names) > 10 else satellite_names[0]
        sat2 = satellite_names[50] if len(satellite_names) > 50 else satellite_names[1]
        
        import datetime
        future_time = datetime.datetime.now() + datetime.timedelta(hours=28, minutes=45)
        
        print(f"üõ∞Ô∏è  Sat√©lite 1: {sat1}")
        print(f"üõ∞Ô∏è  Sat√©lite 2: {sat2}")
        print(f"üìÖ Encuentro proyectado: {future_time.strftime('%Y-%m-%d %H:%M')} UTC")
        print(f"üìè Distancia m√≠nima estimada: 15.3 km")
        print(f"üöÄ Velocidad relativa: 8,200 m/s")
        print(f"‚è∞ Tiempo hasta encuentro: 28.75 horas")
        
        print(f"\n‚ö° AN√ÅLISIS DE TIEMPO DE MANIOBRA:")
        result = self.calculate_maneuver_time(
            v_rel=8200,
            R_req=1000,
            sigma_0=120,
            k=0.001,
            n=3
        )
        
        if 'error' not in result:
            tiempo = result['tiempo_maniobra']
            print(f"‚è∞ Tiempo de maniobra requerido: {tiempo['horas']:.2f} horas")
            print(f"{result['evaluacion']['criticidad']}")
            print(f"üí° {result['evaluacion']['recomendacion']}")
            
            print(f"\nüìä EVALUACI√ìN:")
            tiempo_disponible = 28.75
            tiempo_requerido = tiempo['horas']
            
            if tiempo_disponible > tiempo_requerido:
                margen = tiempo_disponible - tiempo_requerido
                print(f"‚úÖ MARGEN SEGURO: {margen:.1f} horas disponibles")
                print(f"üéØ Ejecutar maniobra antes de: {(future_time - datetime.timedelta(hours=tiempo_requerido)).strftime('%Y-%m-%d %H:%M')} UTC")
            else:
                deficit = tiempo_requerido - tiempo_disponible
                print(f"üö® SITUACI√ìN CR√çTICA: D√©ficit de {deficit:.1f} horas")
                print(f"‚ö° Maniobra inmediata requerida")
        
        print(f"\nüí° Este es un ejemplo de c√≥mo el sistema detectar√≠a y analizar√≠a")
        print(f"   un caso real de conjunci√≥n satelital.")


# NUEVO M√ìDULO PARA EL HACKAT√ìN - SISTEMA ISL CONTROL
class ISLControlSystem:
    """
    Sistema de Control de Enlaces Inter-Satelitales (ISL) con conciencia de propulsi√≥n
    
    Este m√≥dulo simula la l√≥gica que se ejecutar√≠a en el chip IENAI para:
    - Gestionar el tr√°fico de red satelital basado en riesgo de colisi√≥n
    - Optimizar el enrutamiento considerando el estado del propulsor
    - Tomar decisiones aut√≥nomas de maniobra y comunicaci√≥n
    """
    
    def __init__(self, analyzer: SatelliteAnalyzer):
        self.analyzer = analyzer
        self.network_nodes = []  # Lista de sat√©lites en la red
        self.current_routes = {}  # Rutas actuales de comunicaci√≥n
        
    def determine_thrust_aware_routing(self, sat_local_name: str, sat_neighbor_name: str, 
                                       collision_risk_data: Dict, propellant_level: float) -> Dict:
        """
        Simula la l√≥gica de enrutamiento basada en el riesgo de colisi√≥n y el estado del propulsor IENAI.
        ESTA FUNCI√ìN SE EJECUTAR√çA EN EL CHIP DEL IENAI.
        
        Args:
            sat_local_name: Nombre del sat√©lite local (este sat√©lite)
            sat_neighbor_name: Sat√©lite vecino en la red
            collision_risk_data: Datos de riesgo de colisi√≥n
            propellant_level: Nivel de propelente (0.0 a 1.0)
            
        Returns:
            Dict: Comandos y decisiones del sistema ISL
        """
        
        # 1. Evaluar si se necesita una maniobra (usando la l√≥gica existente)
        risk_level = collision_risk_data.get('risk_level', 'BAJO')
        close_encounters = collision_risk_data.get('close_encounters', [])
        
        # 2. Calcular par√°metros de maniobra basados en el riesgo
        maneuver_analysis = None
        time_to_maneuver_hours = float('inf')
        
        if risk_level in ['ALTO', 'CR√çTICO'] and close_encounters:
            # Obtener el encuentro m√°s cercano
            nearest_encounter = min(close_encounters, key=lambda x: x['distance_km'])
            
            # Estimar velocidad relativa basada en la distancia del encuentro
            if nearest_encounter['distance_km'] < 5:
                v_rel_estimate = 12000  # Encuentro frontal cr√≠tico
            elif nearest_encounter['distance_km'] < 20:
                v_rel_estimate = 8000   # Encuentro perpendicular
            else:
                v_rel_estimate = 3000   # Encuentro lateral
            
            # Calcular tiempo de maniobra requerido
            maneuver_analysis = self.analyzer.calculate_maneuver_time(
                v_rel=v_rel_estimate,
                R_req=500.0,     # 500m de seguridad para sat√©lites comerciales
                sigma_0=100.0,   # 100m de incertidumbre est√°ndar
                k=0.001,         # Crecimiento normal de incertidumbre
                n=3.0            # 3 sigma de confianza
            )
            
            if 'error' not in maneuver_analysis:
                time_to_maneuver_hours = maneuver_analysis['tiempo_maniobra']['horas']
        
        # 3. L√ìGICA DE DECISI√ìN ISL (El coraz√≥n del proyecto)
        decision_result = self._make_isl_decision(
            sat_local_name, sat_neighbor_name, risk_level, 
            time_to_maneuver_hours, propellant_level, maneuver_analysis
        )
        
        return decision_result
    
    def _make_isl_decision(self, sat_local: str, sat_neighbor: str, risk_level: str,
                          time_hours: float, propellant: float, maneuver_data: Dict) -> Dict:
        """
        N√∫cleo de la l√≥gica de decisi√≥n ISL
        """
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # Clasificar urgencia temporal
        if time_hours < 1:
            urgency = "CR√çTICO_INMEDIATO"
        elif time_hours < 6:
            urgency = "CR√çTICO_CORTO_PLAZO"
        elif time_hours < 24:
            urgency = "MODERADO"
        else:
            urgency = "BAJO"
        
        # DECISION TREE PRINCIPAL
        if urgency in ["CR√çTICO_INMEDIATO", "CR√çTICO_CORTO_PLAZO"]:
            if propellant > 0.15:  # Suficiente combustible (>15%)
                command = "THRUST_IMMINENT"
                action = f"Preparando maniobra de evasi√≥n. Desviando tr√°fico cr√≠tico al sat√©lite {sat_neighbor}"
                network_priority = "HIGH_REROUTE"
                bandwidth_allocation = 0.2  # 20% del ancho de banda para coordinar maniobra
                
            elif propellant > 0.05:  # Combustible limitado (5-15%)
                command = "THRUST_CONDITIONAL"
                action = f"Maniobra condicional. Evaluando alternativas. Alertando a {sat_neighbor}"
                network_priority = "MEDIUM_REROUTE"
                bandwidth_allocation = 0.1  # 10% para coordinaci√≥n
                
            else:  # Combustible insuficiente (<5%)
                command = "THRUST_IMPOSSIBLE"
                action = f"Combustible insuficiente. Emitiendo alerta de posici√≥n. Transferencia total a {sat_neighbor}"
                network_priority = "EMERGENCY_REROUTE"
                bandwidth_allocation = 0.05  # 5% m√≠nimo para alertas
                
        elif urgency == "MODERADO":
            if propellant > 0.25:  # Buen nivel de combustible
                command = "THRUST_PLANNED"
                action = f"Maniobra planificada. Coordinando con {sat_neighbor} para redistribuci√≥n de tr√°fico"
                network_priority = "PLANNED_REROUTE"
                bandwidth_allocation = 0.8  # 80% operaci√≥n normal
                
            else:
                command = "THRUST_PRESERVE"
                action = f"Conservando combustible. Solicitando soporte de red a {sat_neighbor}"
                network_priority = "FUEL_CONSERVATION"
                bandwidth_allocation = 0.6  # 60% operaci√≥n reducida
                
        else:  # BAJO riesgo
            command = "ROUTE_NORMAL"
            action = "Operaci√≥n normal. Sin amenaza inmediata de colisi√≥n"
            network_priority = "NORMAL"
            bandwidth_allocation = 1.0  # 100% operaci√≥n normal
        
        # Generar protocolo de comunicaci√≥n ISL
        isl_protocol = self._generate_isl_protocol(
            command, sat_local, sat_neighbor, urgency, propellant
        )
        
        return {
            'timestamp': timestamp,
            'command': command,
            'action': action,
            'urgency_level': urgency,
            'risk_assessment': risk_level,
            'propellant_status': f"{propellant*100:.1f}%",
            'time_to_maneuver_hours': time_hours,
            'network_priority': network_priority,
            'bandwidth_allocation': bandwidth_allocation,
            'target_satellite': sat_neighbor,
            'isl_protocol': isl_protocol,
            'maneuver_data': maneuver_data,
            'autonomous_decision': True,
            'chip_location': 'IENAI_PROCESSOR'
        }
    
    def _generate_isl_protocol(self, command: str, sat_local: str, sat_neighbor: str,
                              urgency: str, propellant: float) -> Dict:
        """
        Generar protocolo de comunicaci√≥n entre sat√©lites
        """
        protocol = {
            'message_type': 'ISL_COORDINATION',
            'source': sat_local,
            'destination': sat_neighbor,
            'priority': 'HIGH' if urgency.startswith('CR√çTICO') else 'MEDIUM',
            'encryption': 'AES256_QUANTUM_SAFE',
            'compression': 'SATELLITE_OPTIMIZED'
        }
        
        if command == "THRUST_IMMINENT":
            protocol['payload'] = {
                'alert_type': 'IMMINENT_MANEUVER',
                'maneuver_window': '< 1 hour',
                'requested_action': 'TAKE_TRAFFIC_LOAD',
                'backup_required': True,
                'telemetry_sharing': True
            }
        elif command == "THRUST_IMPOSSIBLE":
            protocol['payload'] = {
                'alert_type': 'PROPULSION_FAILURE',
                'maneuver_capability': False,
                'requested_action': 'EMERGENCY_BACKUP',
                'position_alert': True,
                'ground_notification': True
            }
        elif command == "ROUTE_NORMAL":
            protocol['payload'] = {
                'alert_type': 'STATUS_NORMAL',
                'maneuver_capability': True,
                'requested_action': 'MAINTAIN_NORMAL_OPS',
                'health_check': True
            }
        else:
            protocol['payload'] = {
                'alert_type': 'CONDITIONAL_MANEUVER',
                'maneuver_probability': f"{min(1.0, (1.0 - propellant) + 0.5):.2f}",
                'requested_action': 'STANDBY_SUPPORT',
                'monitoring_required': True
            }
        
        return protocol
    
    def simulate_constellation_response(self, decision_result: Dict, 
                                      constellation_size: int = 5) -> Dict:
        """
        Simular la respuesta de una constelaci√≥n de sat√©lites al comando ISL
        """
        constellation_response = {
            'constellation_id': 'IENAI_NETWORK_ALPHA',
            'total_satellites': constellation_size,
            'responding_satellites': [],
            'network_adaptation': {},
            'collective_decision': None
        }
        
        # Simular respuesta de otros sat√©lites
        for i in range(constellation_size):
            sat_id = f"IENAI_SAT_{i+1:02d}"
            if sat_id != decision_result.get('target_satellite', ''):
                
                # Simular capacidad de cada sat√©lite
                sat_capacity = np.random.uniform(0.6, 1.0)  # 60-100% capacidad
                sat_fuel = np.random.uniform(0.1, 0.9)      # 10-90% combustible
                
                response = {
                    'satellite_id': sat_id,
                    'available_capacity': f"{sat_capacity*100:.1f}%",
                    'fuel_level': f"{sat_fuel*100:.1f}%",
                    'can_assist': sat_capacity > 0.3,
                    'priority_level': 'HIGH' if sat_capacity > 0.7 else 'MEDIUM'
                }
                
                constellation_response['responding_satellites'].append(response)
        
        # Calcular adaptaci√≥n de red
        total_capacity = sum([float(sat['available_capacity'].rstrip('%'))/100 
                            for sat in constellation_response['responding_satellites']])
        
        constellation_response['network_adaptation'] = {
            'total_available_capacity': f"{total_capacity*100:.1f}%",
            'load_distribution': 'AUTOMATIC',
            'failover_ready': total_capacity > 1.5,
            'latency_impact': 'MINIMAL' if total_capacity > 2.0 else 'MODERATE'
        }
        
        # Decisi√≥n colectiva de la constelaci√≥n
        if decision_result['urgency_level'].startswith('CR√çTICO'):
            constellation_response['collective_decision'] = 'EMERGENCY_PROTOCOL_ACTIVATED'
        elif total_capacity > 1.8:
            constellation_response['collective_decision'] = 'FULL_SUPPORT_GRANTED'
        else:
            constellation_response['collective_decision'] = 'LIMITED_SUPPORT_AVAILABLE'
        
        return constellation_response


class HackathonDemo:
    """
    Clase para demostrar el sistema ISL en el hackathon
    """
    
    def __init__(self, analyzer: SatelliteAnalyzer):
        self.analyzer = analyzer
        self.isl_system = ISLControlSystem(analyzer)
        
    def run_complete_demo(self):
        """
        Ejecutar demostraci√≥n completa del sistema ISL para el hackathon
        """
        print("üöÄ DEMOSTRACI√ìN COMPLETA DEL SISTEMA ISL-IENAI")
        print("=" * 70)
        print("üéØ Sistema de Control de Enlaces Inter-Satelitales con Conciencia de Propulsi√≥n")
        print("üí° Simulando operaci√≥n aut√≥noma en chip IENAI")
        print("-" * 70)
        
        # Escenarios de prueba
        scenarios = [
            {
                'name': 'üî¥ ESCENARIO CR√çTICO: Encuentro Frontal Inminente',
                'risk_data': {
                    'risk_level': 'CR√çTICO',
                    'close_encounters': [{'distance_km': 2.5, 'datetime': datetime.now()}]
                },
                'propellant': 0.85,  # 85% combustible
                'description': 'Sat√©lite con buen combustible detecta colisi√≥n inminente'
            },
            {
                'name': 'üü† ESCENARIO CR√çTICO: Combustible Bajo',
                'risk_data': {
                    'risk_level': 'ALTO',
                    'close_encounters': [{'distance_km': 8.3, 'datetime': datetime.now()}]
                },
                'propellant': 0.03,  # 3% combustible
                'description': 'Sat√©lite con combustible cr√≠tico detecta amenaza'
            },
            {
                'name': 'üü° ESCENARIO MODERADO: Encuentro Planificado',
                'risk_data': {
                    'risk_level': 'MEDIO',
                    'close_encounters': [{'distance_km': 25.7, 'datetime': datetime.now()}]
                },
                'propellant': 0.60,  # 60% combustible
                'description': 'Encuentro detectado con tiempo para planificar'
            },
            {
                'name': 'üü¢ ESCENARIO NORMAL: Operaci√≥n Rutinaria',
                'risk_data': {
                    'risk_level': 'BAJO',
                    'close_encounters': []
                },
                'propellant': 0.75,  # 75% combustible
                'description': 'Operaci√≥n normal sin amenazas detectadas'
            }
        ]
        
        for i, scenario in enumerate(scenarios, 1):
            print(f"\n{i}. {scenario['name']}")
            print(f"   üìù {scenario['description']}")
            print(f"   ‚õΩ Combustible: {scenario['propellant']*100:.1f}%")
            
            # Ejecutar an√°lisis ISL
            decision = self.isl_system.determine_thrust_aware_routing(
                sat_local_name="IENAI_SAT_01",
                sat_neighbor_name="IENAI_SAT_02", 
                collision_risk_data=scenario['risk_data'],
                propellant_level=scenario['propellant']
            )
            
            # Mostrar resultados
            print(f"   ü§ñ DECISI√ìN AUT√ìNOMA: {decision['command']}")
            print(f"   ‚ö° Acci√≥n: {decision['action']}")
            print(f"   üì° Prioridad de red: {decision['network_priority']}")
            print(f"   üìä Ancho de banda: {decision['bandwidth_allocation']*100:.0f}%")
            
            if decision['time_to_maneuver_hours'] < float('inf'):
                print(f"   ‚è∞ Tiempo para maniobra: {decision['time_to_maneuver_hours']:.2f} horas")
            
            # Simular respuesta de constelaci√≥n
            constellation_response = self.isl_system.simulate_constellation_response(decision)
            print(f"   üõ∞Ô∏è  Respuesta de constelaci√≥n: {constellation_response['collective_decision']}")
            print(f"   üåê Capacidad disponible: {constellation_response['network_adaptation']['total_available_capacity']}")
            
            print("   " + "-" * 50)
        
        print(f"\n‚úÖ DEMOSTRACI√ìN COMPLETADA")
        print(f"üéØ El sistema ISL-IENAI est√° listo para:")
        print(f"   ‚Ä¢ Detecci√≥n aut√≥noma de riesgos de colisi√≥n")
        print(f"   ‚Ä¢ Toma de decisiones basada en estado de propulsi√≥n")
        print(f"   ‚Ä¢ Gesti√≥n inteligente de red satelital")
        print(f"   ‚Ä¢ Coordinaci√≥n de constelaci√≥n en tiempo real")
        print(f"   ‚Ä¢ Operaci√≥n completamente aut√≥noma en el espacio")
    
    
    def plot_orbital_animation(self, satellite_name: str, hours: int = 24, frames: int = 100) -> bool:
        """
        Crear una animaci√≥n de la √≥rbita del sat√©lite alrededor de la Tierra
        
        Args:
            satellite_name: Nombre del sat√©lite
            hours: Horas de √≥rbita a animar
            frames: N√∫mero de frames en la animaci√≥n
            
        Returns:
            bool: True si la animaci√≥n fue exitosa
        """
        try:
            if satellite_name not in self.satellites:
                print(f"‚ùå Sat√©lite {satellite_name} no encontrado")
                return False
            
            satellite = self.satellites[satellite_name]['satellite']
            print(f"üé¨ Generando animaci√≥n orbital para {satellite_name}...")
            print(f"‚è±Ô∏è  Calculando {frames} posiciones para {hours} horas...")
            
            # Calcular todas las posiciones
            all_positions = []
            start_time = self.ts.now()
            
            for frame in range(frames + 1):
                minutes = (hours * 60 * frame) / frames
                t = self.ts.tt_jd(start_time.tt + minutes / (24 * 60))
                geocentric = satellite.at(t)
                position = geocentric.position.km
                all_positions.append(position)
            
            all_positions = np.array(all_positions)
            print(f"‚úÖ Posiciones calculadas")
            
            # Crear la animaci√≥n
            fig = go.Figure()
            
            # Agregar la Tierra con un colorscale m√°s simple
            u = np.linspace(0, 2 * np.pi, 30)
            v = np.linspace(0, np.pi, 30)
            x_earth = 6371 * np.outer(np.cos(u), np.sin(v))
            y_earth = 6371 * np.outer(np.sin(u), np.sin(v))
            z_earth = 6371 * np.outer(np.ones(np.size(u)), np.cos(v))
            
            fig.add_trace(go.Surface(
                x=x_earth, y=y_earth, z=z_earth,
                colorscale='Blues',  # Cambi√© de 'Earth' a 'Blues' para mayor compatibilidad
                opacity=0.8,
                name='Tierra',
                showscale=False,
                hovertemplate='Tierra<extra></extra>'
            ))
            
            print(f"üåç Tierra agregada a la visualizaci√≥n")
            
            # Crear frames para la animaci√≥n (reducir cantidad para mejor rendimiento)
            frames_list = []
            step = max(1, frames // 20)  # M√°ximo 20 frames para mejor rendimiento
            
            for i in range(0, frames + 1, step):
                if i >= len(all_positions):
                    break
                    
                frame_data = [
                    go.Surface(
                        x=x_earth, y=y_earth, z=z_earth,
                        colorscale='Blues',
                        opacity=0.8,
                        showscale=False,
                        hovertemplate='Tierra<extra></extra>'
                    ),
                    go.Scatter3d(
                        x=all_positions[:i+1, 0],
                        y=all_positions[:i+1, 1],
                        z=all_positions[:i+1, 2],
                        mode='lines',
                        line=dict(color='red', width=6),
                        name='Trayectoria',
                        hovertemplate='Trayectoria<extra></extra>'
                    ),
                    go.Scatter3d(
                        x=[all_positions[i, 0]],
                        y=[all_positions[i, 1]],
                        z=[all_positions[i, 2]],
                        mode='markers',
                        marker=dict(size=12, color='yellow', symbol='circle'),
                        name='Sat√©lite',
                        hovertemplate=f'{satellite_name}<br>X: %{{x:.1f}} km<br>Y: %{{y:.1f}} km<br>Z: %{{z:.1f}} km<extra></extra>'
                    )
                ]
                frames_list.append(go.Frame(data=frame_data, name=str(i)))
            
            fig.frames = frames_list
            print(f"üéûÔ∏è  {len(frames_list)} frames de animaci√≥n creados")
            
            # Configurar la animaci√≥n con controles mejorados
            fig.update_layout(
                title=f'üé¨ Animaci√≥n Orbital: {satellite_name}<br><sub>Per√≠odo: {hours} horas | Frames: {len(frames_list)}</sub>',
                scene=dict(
                    xaxis_title='X (km)',
                    yaxis_title='Y (km)', 
                    zaxis_title='Z (km)',
                    aspectmode='cube',
                    camera=dict(eye=dict(x=2.5, y=2.5, z=2.5)),
                    bgcolor='black'
                ),
                font=dict(size=12),
                width=1000,
                height=700,
                updatemenus=[{
                    'type': 'buttons',
                    'showactive': False,
                    'x': 0.1,
                    'y': 0.02,
                    'buttons': [
                        {
                            'label': '‚ñ∂Ô∏è Reproducir',
                            'method': 'animate',
                            'args': [None, {
                                'frame': {'duration': 200, 'redraw': True},
                                'fromcurrent': True,
                                'transition': {'duration': 100}
                            }]
                        },
                        {
                            'label': '‚è∏Ô∏è Pausar',
                            'method': 'animate',
                            'args': [[None], {
                                'frame': {'duration': 0, 'redraw': False},
                                'mode': 'immediate',
                                'transition': {'duration': 0}
                            }]
                        },
                        {
                            'label': 'üîÑ Reiniciar',
                            'method': 'animate',
                            'args': [None, {
                                'frame': {'duration': 200, 'redraw': True},
                                'mode': 'immediate',
                                'transition': {'duration': 0}
                            }]
                        }
                    ]
                }],
                sliders=[{
                    'active': 0,
                    'yanchor': 'top',
                    'xanchor': 'left',
                    'currentvalue': {
                        'font': {'size': 20},
                        'prefix': 'Frame:',
                        'visible': True,
                        'xanchor': 'right'
                    },
                    'transition': {'duration': 100, 'easing': 'cubic-in-out'},
                    'pad': {'b': 10, 't': 50},
                    'len': 0.9,
                    'x': 0.1,
                    'y': 0,
                    'steps': [
                        {
                            'args': [[f.name], {
                                'frame': {'duration': 100, 'redraw': True},
                                'mode': 'immediate',
                                'transition': {'duration': 100}
                            }],
                            'label': f.name,
                            'method': 'animate'
                        } for f in frames_list
                    ]
                }]
            )
            
            print(f"üé® Configuraci√≥n de animaci√≥n completada")
            
            # Mostrar la visualizaci√≥n
            print(f"üåê Abriendo animaci√≥n en el navegador...")
            fig.show()
            
            # Guardar como HTML
            safe_name = satellite_name.replace(' ', '_').replace('(', '').replace(')', '')
            filename = f"animacion_orbital_{safe_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            fig.write_html(filename)
            print(f"üíæ Animaci√≥n guardada como: {filename}")
            print(f"üìÅ Ubicaci√≥n: {os.path.abspath(filename)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error creando animaci√≥n: {str(e)}")
            print(f"üí° Sugerencias:")
            print(f"   1. Verifica que el nombre del sat√©lite sea correcto")
            print(f"   2. Intenta con menos frames (ej: 20-30)")
            print(f"   3. Reduce las horas (ej: 2-6 horas)")
            return False


def mostrar_menu():
    """Mostrar el men√∫ de opciones"""
    print("\n" + "=" * 60)
    print("üéØ OPCIONES DISPONIBLES:")
    print("   1. Buscar sat√©lite (b√∫squeda inteligente)")
    print("   2. Ver sat√©lites populares por categor√≠a")
    print("   3. Informaci√≥n detallada de un sat√©lite")
    print("   4. Calcular √≥rbitas futuras")
    print("   5. An√°lizar riesgo de colisi√≥n")
    print("   6. Visualizar √≥rbita (2D)")
    print("   7. Visualizaci√≥n 3D (Tierra + Sat√©lites)")
    print("   8. Animaci√≥n orbital 3D")
    print("   9. Exportar lista completa de sat√©lites")
    print("  10. C√°lculo de tiempo de maniobra de evasi√≥n")
    print("  11. An√°lisis completo de colisi√≥n + maniobra")
    print("  12. üîç BUSCAR CASOS REALES DE COLISI√ìN")
    print("  13. üöÄ DEMO SISTEMA ISL-IENAI (HACKATHON)")
    print("  14. ü§ñ Simulador ISL Individual")
    print("  15. Salir")
    print("=" * 60)


def main():
    """Funci√≥n principal del programa"""
    print("=" * 60)
    print("üõ∞Ô∏è  SISTEMA DE AN√ÅLISIS DE SAT√âLITES")
    print("    NASA Space App Challenge 2025 - Malkie Space")
    print("=" * 60)
    
    # Inicializar el analizador
    analyzer = SatelliteAnalyzer()
    
    # Descargar datos de sat√©lites
    if not analyzer.download_tle_data():
        print("‚ùå Error al descargar datos. Terminando programa.")
        return
    
    print("\nÔøΩ ¬°Sistema cargado exitosamente!")
    
    # El men√∫ se mostrar√° autom√°ticamente en cada iteraci√≥n del bucle
    
    while True:
        try:
            # Mostrar men√∫ en cada iteraci√≥n
            mostrar_menu()
            print("\n" + "-" * 40)
            option = input("Selecciona una opci√≥n (1-15): ").strip()
            
            if option == '1':
                # B√∫squeda inteligente de sat√©lite
                search_term = input("üîç Ingresa el nombre del sat√©lite a buscar: ").strip()
                if search_term:
                    results = analyzer.smart_search(search_term)
                    
                    if results['total_found'] > 0:
                        print(f"\n‚úÖ Encontrados {results['total_found']} sat√©lites:")
                        
                        # Mostrar coincidencias exactas primero
                        if results['exact_matches']:
                            print("\nüéØ COINCIDENCIAS EXACTAS:")
                            for i, name in enumerate(results['exact_matches'], 1):
                                print(f"   {i}. {name}")
                        
                        # Mostrar coincidencias parciales por categor√≠a
                        if results['category_matches']:
                            print("\nüìä RESULTADOS POR CATEGOR√çA:")
                            for category, satellites in results['category_matches'].items():
                                print(f"\n   üìÇ {category.capitalize()}:")
                                for i, name in enumerate(satellites[:5], 1):  # M√°ximo 5 por categor√≠a
                                    print(f"      {i}. {name}")
                                if len(satellites) > 5:
                                    print(f"      ... y {len(satellites) - 5} m√°s en esta categor√≠a")
                        
                        # Mostrar sugerencias si hay pocas coincidencias
                        if results['suggestions'] and results['total_found'] < 5:
                            print(f"\nüí° SUGERENCIAS RELACIONADAS:")
                            for i, suggestion in enumerate(results['suggestions'][:8], 1):
                                print(f"   {i}. {suggestion}")
                    else:
                        print("‚ùå No se encontraron sat√©lites con ese nombre")
                        
                        # Mostrar ejemplos populares
                        print("\nüåü ¬øQuiz√°s buscabas alguno de estos sat√©lites populares?")
                        analyzer.show_satellite_examples()
                        
            elif option == '2':
                # Ver sat√©lites populares por categor√≠a
                print("üåü Sat√©lites populares por categor√≠a:")
                popular = analyzer.get_popular_satellites()
                for category, satellites in popular.items():
                    print(f"\nüìÇ {category.upper()}:")
                    for i, name in enumerate(satellites, 1):
                        print(f"   {i}. {name}")
                        
            elif option == '3':
                # Informaci√≥n detallada de un sat√©lite
                sat_name = input("üìã Nombre del sat√©lite: ").strip()
                if sat_name:
                    info = analyzer.get_satellite_info(sat_name)
                    if 'error' not in info:
                        print(f"\nüõ∞Ô∏è  INFORMACI√ìN DETALLADA: {sat_name}")
                        print("=" * 50)
                        print(f"üìÖ Fecha de los datos: {info['current_time']}")
                        print(f"üìç Posici√≥n actual:")
                        print(f"   ‚Ä¢ Latitud: {info['position']['latitude']:.3f}¬∞")
                        print(f"   ‚Ä¢ Longitud: {info['position']['longitude']:.3f}¬∞")
                        print(f"   ‚Ä¢ Altitud: {info['position']['altitude']:.1f} km")
                        print(f"üìä Par√°metros orbitales:")
                        print(f"   ‚Ä¢ Inclinaci√≥n: {info['orbital_elements'].get('inclination', 'N/A')}")
                        print(f"   ‚Ä¢ Excentricidad: {info['orbital_elements'].get('eccentricity', 'N/A')}")
                        print(f"   ‚Ä¢ Per√≠odo: {info['orbital_elements'].get('period_minutes', 'N/A')} min")
                    else:
                        print(f"‚ùå {info['error']}")
                        
            elif option == '4':
                # Calcular √≥rbitas futuras
                sat_name = input("üöÄ Nombre del sat√©lite: ").strip()
                if sat_name:
                    try:
                        days = int(input("üìÖ D√≠as a calcular (default 7): ") or "7")
                        days = min(days, 180)  # Limitar a m√°ximo 180 d√≠as
                        print(f"‚è≥ Calculando posiciones futuras para {days} d√≠as...")
                        positions = analyzer.calculate_future_positions(sat_name, days)
                        
                        if positions:
                            print(f"\nüõ∞Ô∏è  PREDICCIONES ORBITALES: {sat_name}")
                            print("=" * 60)
                            for pos in positions[:20]:  # Mostrar primeros 20
                                print(f"üìÖ {pos['datetime'].strftime('%Y-%m-%d %H:%M')} UTC")
                                print(f"   Lat: {pos['latitude']:7.3f}¬∞  Lon: {pos['longitude']:8.3f}¬∞  Alt: {pos['altitude_km']:7.1f} km")
                            
                            if len(positions) > 20:
                                print(f"   ... y {len(positions) - 20} predicciones m√°s")
                                
                            # Mostrar estad√≠sticas
                            altitudes = [pos['altitude_km'] for pos in positions]
                            print(f"\nüìà ESTAD√çSTICAS:")
                            print(f"   ‚Ä¢ Altitud m√≠nima: {min(altitudes):.1f} km")
                            print(f"   ‚Ä¢ Altitud m√°xima: {max(altitudes):.1f} km")
                            print(f"   ‚Ä¢ Altitud promedio: {sum(altitudes)/len(altitudes):.1f} km")
                        else:
                            print("‚ùå No se pudieron calcular las posiciones")
                            print("üí° Sugerencias:")
                            print("   ‚Ä¢ Verifica que el nombre del sat√©lite sea exacto")
                            print("   ‚Ä¢ Usa la opci√≥n 1 para buscar sat√©lites disponibles")
                            print("   ‚Ä¢ Intenta con nombres populares como: ISS (ZARYA), STARLINK-1007")
                    except ValueError:
                        print("‚ùå N√∫mero de d√≠as inv√°lido. Debe ser un n√∫mero entero.")
                        
            elif option == '5':
                # Analizar riesgo de colisi√≥n
                sat_name = input("‚ö†Ô∏è  Sat√©lite principal: ").strip()
                if sat_name:
                    sat2_name = input("üéØ Segundo sat√©lite (Enter para analizar contra todos): ").strip() or None
                    try:
                        threshold = float(input("üìè Distancia m√≠nima en km (default 10): ") or "10")
                        days = int(input("üìÖ D√≠as a analizar (4): ") or "4")
                        
                        print("‚è≥ Analizando riesgo de colisi√≥n...")
                        risk_analysis = analyzer.analyze_collision_risk(sat_name, sat2_name, threshold, days)
                        
                        if 'error' not in risk_analysis:
                            print(f"\n‚ö†Ô∏è  AN√ÅLISIS DE RIESGO DE COLISI√ìN")
                            print("=" * 50)
                            print(f"üõ∞Ô∏è  Sat√©lite: {risk_analysis['satellite']}")
                            print(f"üìä Nivel de riesgo: {risk_analysis['risk_level']}")
                            print(f"üìà Encuentros cercanos: {risk_analysis['total_encounters']}")
                            print(f"üìÖ Per√≠odo analizado: {risk_analysis['analysis_period_days']} d√≠as")
                            print(f"üìè Umbral: {risk_analysis['threshold_km']} km")
                            
                            if risk_analysis['close_encounters']:
                                print(f"\nüö® ENCUENTROS CERCANOS DETECTADOS:")
                                for enc in risk_analysis['close_encounters'][:10]:  # Primeros 10
                                    print(f"  ‚Ä¢ {enc['datetime'].strftime('%Y-%m-%d %H:%M')} UTC")
                                    print(f"    Con: {enc['satellite2']}")
                                    print(f"    Distancia: {enc['distance_km']:.2f} km")
                            else:
                                print("‚úÖ No se detectaron encuentros cercanos")
                        else:
                            print(f"‚ùå {risk_analysis['error']}")
                    except ValueError:
                        print("‚ùå Valores inv√°lidos")
                        
            elif option == '6':
                # Visualizar √≥rbita 2D
                sat_name = input("üìà Nombre del sat√©lite: ").strip()
                if sat_name:
                    try:
                        hours = int(input("‚è∞ Horas de √≥rbita a mostrar (default 24): ") or "24")
                        print("‚è≥ Generando visualizaci√≥n 2D...")
                        analyzer.plot_orbit(sat_name, hours)
                    except ValueError:
                        print("‚ùå N√∫mero de horas inv√°lido")
                        
            elif option == '7':
                # Visualizaci√≥n 3D de la Tierra con sat√©lites
                print("üåç Visualizaci√≥n 3D de sat√©lites alrededor de la Tierra")
                satellites_input = input("üõ∞Ô∏è  Nombres de sat√©lites (separados por coma): ").strip()
                if satellites_input:
                    satellite_names = [name.strip() for name in satellites_input.split(',')]
                    try:
                        hours = int(input("‚è∞ Horas de trayectoria (default 12): ") or "12")
                        print("‚è≥ Generando visualizaci√≥n 3D...")
                        analyzer.plot_3d_earth_with_satellites(satellite_names, hours)
                    except ValueError:
                        print("‚ùå N√∫mero de horas inv√°lido")
                        
            elif option == '8':
                # Animaci√≥n orbital 3D
                sat_name = input("üé¨ Nombre del sat√©lite para animar: ").strip()
                if sat_name:
                    try:
                        hours = int(input("‚è∞ Horas de √≥rbita a animar (default 6): ") or "6")
                        frames = int(input("üéûÔ∏è  N√∫mero de frames (default 50): ") or "50")
                        print("‚è≥ Generando animaci√≥n 3D...")
                        analyzer.plot_orbital_animation(sat_name, hours, frames)
                    except ValueError:
                        print("‚ùå Valores inv√°lidos")
                        
            elif option == '9':
                # Exportar lista completa de sat√©lites
                filename = input("üìÅ Nombre del archivo (default: satelites_disponibles.txt): ").strip() or "satelites_disponibles.txt"
                print("‚è≥ Exportando lista de sat√©lites...")
                if analyzer.export_satellites_list(filename):
                    print(f"‚úÖ Lista exportada exitosamente a: {filename}")
                else:
                    print("‚ùå Error al exportar la lista")
                    
            elif option == '10':
                # C√°lculo de tiempo de maniobra de evasi√≥n
                print("‚è∞ C√ÅLCULO DE TIEMPO DE MANIOBRA DE EVASI√ìN")
                print("=" * 50)
                try:
                    v_rel = float(input("üöÄ Velocidad relativa (m/s) [100-14000]: "))
                    R_req = float(input("üìè Distancia de seguridad (m) [default 1000]: ") or "1000")
                    sigma_0 = float(input("üìä Incertidumbre posicional (m) [default 100]: ") or "100")
                    k = float(input("üìà Tasa crecimiento incertidumbre (m/s) [default 0.001]: ") or "0.001")
                    n = float(input("üéØ Factor de confianza (sigma) [default 3]: ") or "3")
                    
                    result = analyzer.calculate_maneuver_time(v_rel, R_req, sigma_0, k, n)
                    
                    if 'error' not in result:
                        print(f"\n‚è∞ RESULTADO DEL AN√ÅLISIS DE MANIOBRA")
                        print("=" * 50)
                        print(f"‚ö° Tiempo de maniobra requerido:")
                        print(f"   ‚Ä¢ {result['tiempo_maniobra']['segundos']:.1f} segundos")
                        print(f"   ‚Ä¢ {result['tiempo_maniobra']['minutos']:.1f} minutos")
                        print(f"   ‚Ä¢ {result['tiempo_maniobra']['horas']:.2f} horas")
                        print(f"   ‚Ä¢ {result['tiempo_maniobra']['dias']:.3f} d√≠as")
                        
                        print(f"\n{result['evaluacion']['criticidad']}")
                        print(f"üí° {result['evaluacion']['recomendacion']}")
                        
                        print(f"\nüéØ Contexto del encuentro:")
                        print(f"   ‚Ä¢ {result['interpretacion']['contexto_leo']['tipo_encuentro']}")
                        print(f"   ‚Ä¢ {result['interpretacion']['contexto_leo']['descripcion']}")
                        
                        print(f"\nüìã Recomendaciones operacionales:")
                        for rec in result['interpretacion']['recomendaciones_operacionales']:
                            print(f"   {rec}")
                            
                        if result['escenarios_alternativos']:
                            print(f"\nüìä Escenarios alternativos:")
                            for escenario in result['escenarios_alternativos']:
                                print(f"   ‚Ä¢ {escenario['nombre']}: {escenario['tiempo_horas']:.2f} horas")
                    else:
                        print(f"‚ùå {result['error']}")
                        if 'recommendation' in result:
                            print(f"üí° {result['recommendation']}")
                            
                except ValueError:
                    print("‚ùå Valores inv√°lidos. Aseg√∫rate de ingresar n√∫meros v√°lidos.")
                    
            elif option == '11':
                # An√°lisis completo de colisi√≥n + maniobra
                print("üîç AN√ÅLISIS COMPLETO: COLISI√ìN + MANIOBRA")
                print("=" * 50)
                sat_name = input("üõ∞Ô∏è  Nombre del sat√©lite principal: ").strip()
                if sat_name:
                    sat2_name = input("üéØ Segundo sat√©lite (Enter para analizar muestra): ").strip() or None
                    try:
                        threshold = float(input("üìè Distancia m√≠nima en km (default 10): ") or "10")
                        days = int(input("üìÖ D√≠as a analizar (default 7): ") or "7")
                        
                        print("‚è≥ Realizando an√°lisis completo...")
                        comprehensive = analyzer.comprehensive_collision_analysis(
                            sat_name, sat2_name, threshold, days
                        )
                        
                        if 'error' not in comprehensive:
                            # Mostrar resumen ejecutivo
                            summary = comprehensive['resumen_ejecutivo']
                            print(f"\nüìä RESUMEN EJECUTIVO")
                            print("=" * 40)
                            print(f"üõ∞Ô∏è  Sat√©lite: {summary['satelite']}")
                            print(f"‚ö†Ô∏è  Nivel de riesgo: {summary['nivel_riesgo']}")
                            print(f"üìà Total encuentros: {summary['total_encuentros']}")
                            print(f"üéØ Acci√≥n recomendada: {summary['accion_recomendada']}")
                            
                            if summary.get('primer_encuentro'):
                                pe = summary['primer_encuentro']
                                print(f"\n‚è∞ PRIMER ENCUENTRO:")
                                print(f"   ‚Ä¢ Fecha: {pe['fecha']}")
                                print(f"   ‚Ä¢ En: {pe['tiempo_horas']:.1f} horas")
                                print(f"   ‚Ä¢ Distancia: {pe['distancia_km']:.2f} km")
                            
                            if summary.get('tiempo_maniobra'):
                                tm = summary['tiempo_maniobra']
                                print(f"\n‚ö° TIEMPO DE MANIOBRA:")
                                print(f"   ‚Ä¢ M√≠nimo: {tm['minimo_horas']:.2f} horas")
                                print(f"   ‚Ä¢ M√°ximo: {tm['maximo_horas']:.2f} horas")
                                print(f"   ‚Ä¢ Promedio: {tm['promedio_horas']:.2f} horas")
                            
                            # Mostrar recomendaciones generales
                            if comprehensive['recomendaciones_generales']:
                                print(f"\nüí° RECOMENDACIONES GENERALES:")
                                for rec in comprehensive['recomendaciones_generales']:
                                    print(f"   {rec}")
                            
                            # Mostrar an√°lisis detallado de maniobras si hay encuentros
                            if comprehensive['analisis_maniobras']:
                                print(f"\nüìä AN√ÅLISIS DETALLADO DE MANIOBRAS:")
                                for i, analysis in enumerate(comprehensive['analisis_maniobras'][:3], 1):
                                    encounter = analysis['encuentro']
                                    print(f"\n   {i}. Encuentro: {encounter['fecha']}")
                                    print(f"      Con: {encounter['satelite_2']}")
                                    print(f"      Distancia: {encounter['distancia_km']:.2f} km")
                                    print(f"      V_rel estimada: {encounter['velocidad_relativa_estimada']:.0f} m/s")
                                    
                                    for maneuver in analysis['analisis_maniobra']:
                                        print(f"      ‚Ä¢ {maneuver['escenario']}: {maneuver['tiempo_maniobra']['horas']:.2f} horas")
                                        print(f"        {maneuver['criticidad']}")
                        else:
                            print(f"‚ùå {comprehensive['error']}")
                            
                    except ValueError:
                        print("‚ùå Valores inv√°lidos")
                        
            elif option == '12':
                # Buscar casos reales de colisi√≥n
                print("üîç B√öSQUEDA EXHAUSTIVA DE CASOS DE COLISI√ìN")
                print("=" * 50)
                print("üí° Esta funci√≥n buscar√° casos reales de encuentros cercanos")
                print("   entre sat√©lites en la base de datos actual.")
                print()
                
                try:
                    threshold = float(input("üìè Umbral de distancia en km (default 75): ") or "75")
                    days = int(input("üìÖ D√≠as a analizar (default 3): ") or "3")
                    max_sats = int(input("üõ∞Ô∏è  M√°ximo sat√©lites a analizar (default 300): ") or "300")
                    
                    print("\n‚è≥ Iniciando b√∫squeda exhaustiva...")
                    print("‚ö†Ô∏è  Esta operaci√≥n puede tomar varios minutos...")
                    
                    # Ejecutar b√∫squeda de casos de colisi√≥n
                    analyzer.demonstrate_collision_case()
                    
                except ValueError:
                    print("‚ùå Valores inv√°lidos")
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è  B√∫squeda cancelada por el usuario")
                    
            elif option == '13':
                # Demo completo del sistema ISL-IENAI para hackathon
                print("üöÄ INICIANDO DEMOSTRACI√ìN DEL SISTEMA ISL-IENAI")
                print("=" * 60)
                print("üí° Sistema de Control de Enlaces Inter-Satelitales")
                print("üéØ Demostrando toma de decisiones aut√≥nomas en el espacio")
                print()
                
                try:
                    demo = HackathonDemo(analyzer)
                    demo.run_complete_demo()
                except Exception as e:
                    print(f"‚ùå Error en demostraci√≥n: {str(e)}")
                    
            elif option == '14':
                # Simulador ISL individual
                print("ü§ñ SIMULADOR ISL INDIVIDUAL")
                print("=" * 50)
                print("üí° Configura tu propio escenario de an√°lisis ISL")
                print()
                
                try:
                    sat_local = input("üõ∞Ô∏è  Sat√©lite local (default: IENAI_SAT_01): ").strip() or "IENAI_SAT_01"
                    sat_neighbor = input("üì° Sat√©lite vecino (default: IENAI_SAT_02): ").strip() or "IENAI_SAT_02"
                    
                    print("\nüéØ Configurar escenario de riesgo:")
                    print("   1. Riesgo CR√çTICO (encuentro < 5 km)")
                    print("   2. Riesgo ALTO (encuentro 5-20 km)")
                    print("   3. Riesgo MEDIO (encuentro 20-50 km)")
                    print("   4. Riesgo BAJO (sin amenazas)")
                    
                    risk_choice = input("Selecciona nivel de riesgo (1-4): ").strip()
                    propellant = float(input("‚õΩ Nivel de combustible (0.0-1.0): ") or "0.5")
                    
                    # Configurar datos de riesgo seg√∫n la selecci√≥n
                    risk_configs = {
                        '1': {'risk_level': 'CR√çTICO', 'close_encounters': [{'distance_km': 2.1, 'datetime': datetime.now()}]},
                        '2': {'risk_level': 'ALTO', 'close_encounters': [{'distance_km': 12.5, 'datetime': datetime.now()}]},
                        '3': {'risk_level': 'MEDIO', 'close_encounters': [{'distance_km': 35.0, 'datetime': datetime.now()}]},
                        '4': {'risk_level': 'BAJO', 'close_encounters': []}
                    }
                    
                    risk_data = risk_configs.get(risk_choice, risk_configs['4'])
                    
                    # Ejecutar an√°lisis ISL
                    isl_system = ISLControlSystem(analyzer)
                    result = isl_system.determine_thrust_aware_routing(
                        sat_local, sat_neighbor, risk_data, propellant
                    )
                    
                    # Mostrar resultados detallados
                    print(f"\nü§ñ RESULTADO DEL AN√ÅLISIS ISL:")
                    print("=" * 50)
                    print(f"‚è∞ Timestamp: {result['timestamp']}")
                    print(f"üöÄ Comando: {result['command']}")
                    print(f"‚ö° Acci√≥n: {result['action']}")
                    print(f"üéØ Urgencia: {result['urgency_level']}")
                    print(f"üìä Riesgo: {result['risk_assessment']}")
                    print(f"‚õΩ Combustible: {result['propellant_status']}")
                    
                    if result['time_to_maneuver_hours'] < float('inf'):
                        print(f"‚è∞ Tiempo para maniobra: {result['time_to_maneuver_hours']:.3f} horas")
                    
                    print(f"üì° Prioridad de red: {result['network_priority']}")
                    print(f"üì∂ Ancho de banda: {result['bandwidth_allocation']*100:.0f}%")
                    print(f"üéØ Sat√©lite objetivo: {result['target_satellite']}")
                    print(f"üß† Decisi√≥n aut√≥noma: {result['autonomous_decision']}")
                    print(f"üíª Ubicaci√≥n: {result['chip_location']}")
                    
                    # Mostrar protocolo ISL
                    protocol = result['isl_protocol']
                    print(f"\nüì° PROTOCOLO ISL:")
                    print(f"   ‚Ä¢ Tipo: {protocol['message_type']}")
                    print(f"   ‚Ä¢ Prioridad: {protocol['priority']}")
                    print(f"   ‚Ä¢ Encriptaci√≥n: {protocol['encryption']}")
                    print(f"   ‚Ä¢ Acci√≥n solicitada: {protocol['payload']['requested_action']}")
                    
                    # Simular respuesta de constelaci√≥n
                    constellation = isl_system.simulate_constellation_response(result)
                    print(f"\nüåê RESPUESTA DE CONSTELACI√ìN:")
                    print(f"   ‚Ä¢ Decisi√≥n colectiva: {constellation['collective_decision']}")
                    print(f"   ‚Ä¢ Capacidad total: {constellation['network_adaptation']['total_available_capacity']}")
                    print(f"   ‚Ä¢ Sat√©lites respondiendo: {len(constellation['responding_satellites'])}")
                    print(f"   ‚Ä¢ Failover listo: {constellation['network_adaptation']['failover_ready']}")
                    
                except ValueError:
                    print("‚ùå Valores inv√°lidos")
                except Exception as e:
                    print(f"‚ùå Error en simulaci√≥n: {str(e)}")
                        
            elif option == '15':
                print("üëã ¬°Gracias por usar el Sistema de An√°lisis de Sat√©lites!")
                break
                        
            elif option == '2':
                # Ver sat√©lites populares por categor√≠a
                print("üåü SAT√âLITES POPULARES POR CATEGOR√çA")
                print("=" * 50)
                
                popular = analyzer.get_popular_satellites()
                
                for category, satellites in popular.items():
                    if satellites:
                        print(f"\nüìÇ {category}:")
                        for i, sat in enumerate(satellites, 1):
                            print(f"   {i}. {sat}")
                    else:
                        print(f"\nüìÇ {category}: (No se encontraron en los datos actuales)")
                
                print(f"\nüí° TIP: Copia cualquier nombre exacto para usarlo en otras opciones")
                
            elif option == '3':
                # Informaci√≥n detallada
                sat_name = input("üì° Ingresa el nombre exacto del sat√©lite: ").strip()
                if not sat_name:
                    print("‚ùå Nombre vac√≠o")
                elif sat_name not in analyzer.satellites:
                    print(f"‚ùå Sat√©lite '{sat_name}' no encontrado")
                    # Ofrecer sugerencias
                    suggestions = analyzer.suggest_satellites(sat_name)
                    if suggestions:
                        print(f"\nüîç ¬øQuisiste decir alguno de estos?")
                        for i, suggestion in enumerate(suggestions[:5], 1):
                            print(f"   {i}. {suggestion}")
                else:
                    info = analyzer.get_satellite_info(sat_name)
                    if info:
                        print(f"\nüìä INFORMACI√ìN DE {info['name']}")
                        print("-" * 50)
                        print(f"Categor√≠a: {info['category']}")
                        print(f"Posici√≥n actual:")
                        print(f"  ‚Ä¢ Latitud: {info['current_position']['latitude']:.4f}¬∞")
                        print(f"  ‚Ä¢ Longitud: {info['current_position']['longitude']:.4f}¬∞")
                        print(f"  ‚Ä¢ Altitud: {info['current_position']['altitude_km']:.2f} km")
                        
                        print(f"\nElementos orbitales:")
                        oe = info['orbital_elements']
                        print(f"  ‚Ä¢ Inclinaci√≥n: {oe['inclination_deg']:.2f}¬∞")
                        print(f"  ‚Ä¢ Excentricidad: {oe['eccentricity']:.6f}")
                        print(f"  ‚Ä¢ Per√≠odo orbital: {oe['period_hours']:.2f} horas")
                        print(f"  ‚Ä¢ Altitud aprox: {oe['approx_altitude_km']:.0f} km")
                        print(f"  ‚Ä¢ Revoluciones/d√≠a: {oe['mean_motion_rev_per_day']:.6f}")
                    else:
                        print("‚ùå Sat√©lite no encontrado")
                        
            elif option == '4':
                # Calcular √≥rbitas futuras
                sat_name = input("üöÄ Nombre del sat√©lite: ").strip()
                if sat_name:
                    try:
                        days = int(input("üìÖ D√≠as hacia el futuro (m√°x 4): ") or "4")
                        days = min(days, 180)
                        
                        print(f"‚è≥ Calculando posiciones futuras para {days} d√≠as...")
                        positions = analyzer.calculate_future_positions(sat_name, days)
                        
                        if positions:
                            print(f"\n‚úÖ Calculadas {len(positions)} posiciones")
                            print("Primeras 5 posiciones:")
                            for i, pos in enumerate(positions[:5]):
                                print(f"  {i+1}. {pos['datetime'].strftime('%Y-%m-%d %H:%M')} UTC")
                                print(f"     Lat: {pos['latitude']:.3f}¬∞, Lon: {pos['longitude']:.3f}¬∞")
                                print(f"     Alt: {pos['altitude_km']:.1f} km")
                        else:
                            print("‚ùå No se pudieron calcular las posiciones")
                    except ValueError:
                        print("‚ùå N√∫mero de d√≠as inv√°lido")
                        
            elif option == '5':
                # An√°lisis de riesgo de colisi√≥n
                sat_name = input("‚ö†Ô∏è  Nombre del sat√©lite: ").strip()
                if sat_name:
                    try:
                        days = int(input("üìÖ D√≠as a analizar (m√°x 180): ") or "180")
                        days = min(days, 180)
                        threshold = float(input("üéØ Distancia umbral en km (default 10): ") or "10")
                        
                        print(f"‚è≥ Analizando riesgo de colisi√≥n...")
                        risk_analysis = analyzer.analyze_collision_risk(sat_name, None, threshold, days)
                        
                        if 'error' not in risk_analysis:
                            print(f"\nüéØ AN√ÅLISIS DE RIESGO DE COLISI√ìN")
                            print("-" * 50)
                            print(f"Sat√©lite: {risk_analysis['satellite']}")
                            print(f"Per√≠odo analizado: {risk_analysis['analysis_period_days']} d√≠as")
                            print(f"Sat√©lites analizados: {risk_analysis['satellites_analyzed']}")
                            print(f"Umbral de distancia: {risk_analysis['threshold_km']} km")
                            print(f"NIVEL DE RIESGO: {risk_analysis['risk_level']}")
                            print(f"Encuentros cercanos: {risk_analysis['total_encounters']}")
                            
                            if risk_analysis['close_encounters']:
                                print("\n‚ö†Ô∏è  ENCUENTROS CERCANOS DETECTADOS:")
                                for enc in risk_analysis['close_encounters'][:10]:  # Primeros 10
                                    print(f"  ‚Ä¢ {enc['datetime'].strftime('%Y-%m-%d %H:%M')} UTC")
                                    print(f"    Con: {enc['satellite2']}")
                                    print(f"    Distancia: {enc['distance_km']:.2f} km")
                            else:
                                print("‚úÖ No se detectaron encuentros cercanos")
                        else:
                            print(f"‚ùå {risk_analysis['error']}")
                    except ValueError:
                        print("‚ùå Valores inv√°lidos")
                        
            elif option == '6':
                # Visualizar √≥rbita 2D
                sat_name = input("üìà Nombre del sat√©lite: ").strip()
                if sat_name:
                    try:
                        hours = int(input("‚è∞ Horas de √≥rbita a mostrar (default 24): ") or "24")
                        print("‚è≥ Generando visualizaci√≥n 2D...")
                        analyzer.plot_orbit(sat_name, hours)
                    except ValueError:
                        print("‚ùå N√∫mero de horas inv√°lido")
                        
            elif option == '7':
                # Visualizaci√≥n 3D de la Tierra con sat√©lites
                print("üåç Visualizaci√≥n 3D de sat√©lites alrededor de la Tierra")
                satellites_input = input("ÔøΩÔ∏è  Nombres de sat√©lites (separados por coma): ").strip()
                if satellites_input:
                    satellite_names = [name.strip() for name in satellites_input.split(',')]
                    try:
                        hours = int(input("‚è∞ Horas de trayectoria (default 12): ") or "12")
                        print("‚è≥ Generando visualizaci√≥n 3D...")
                        analyzer.plot_3d_earth_with_satellites(satellite_names, hours)
                    except ValueError:
                        print("‚ùå N√∫mero de horas inv√°lido")
                        
            elif option == '8':
                # Animaci√≥n orbital 3D
                sat_name = input("üé¨ Nombre del sat√©lite para animar: ").strip()
                if sat_name:
                    try:
                        hours = int(input("‚è∞ Horas de √≥rbita a animar (default 6): ") or "6")
                        frames = int(input("üéûÔ∏è  N√∫mero de frames (default 50): ") or "50")
                        print("‚è≥ Generando animaci√≥n 3D...")
                        analyzer.plot_orbital_animation(sat_name, hours, frames)
                    except ValueError:
                        print("‚ùå Valores inv√°lidos")
                        
            elif option == '8':
                print("ÔøΩüëã ¬°Gracias por usar el Sistema de An√°lisis de Sat√©lites!")
                break
                
            else:
                print("‚ùå Opci√≥n inv√°lida. Selecciona 1-10.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrumpido por el usuario. ¬°Hasta luego!")
            break
        except Exception as e:
            print(f"‚ùå Error inesperado: {str(e)}")


if __name__ == "__main__":
    main()
